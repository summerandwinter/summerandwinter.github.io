<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Winter`s Notes</title>
  
  <subtitle>Summer&amp;Winter</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://summerandwinter.github.io/"/>
  <updated>2019-11-28T08:58:49.415Z</updated>
  <id>https://summerandwinter.github.io/</id>
  
  <author>
    <name>Winter</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac 环境下部署gerrit并与gitlab集成</title>
    <link href="https://summerandwinter.github.io/mac-gerrit-gitlab.html"/>
    <id>https://summerandwinter.github.io/mac-gerrit-gitlab.html</id>
    <published>2018-12-20T10:19:58.000Z</published>
    <updated>2019-11-28T08:58:49.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>系统 macOS Mojave 版本 10.14.1</p><p>jdk</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -version</span><br><span class="line">java version <span class="string">"1.8.0_131"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_131-b11)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)</span><br></pre></td></tr></table></figure><p>nginx</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -v</span><br><span class="line">nginx version: nginx/1.15.6</span><br></pre></td></tr></table></figure><p>git</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git version</span><br><span class="line">git version 2.17.2 (Apple Git-113)</span><br></pre></td></tr></table></figure><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>从<a href="https://www.gerritcodereview.com/" target="_blank" rel="noopener">官网</a>上下载 war 包，本章节使用的是 2.16.1版本。</p><p>存放目录： /Users/summer/</p><p>安装目录：/Users/summer/review_site</p><p>进入存放目录执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar gerrit.war init --batch -d review_site</span><br><span class="line">[2018-12-21 15:27:41,819] [main] INFO  com.google.gerrit.server.config.GerritServerConfigProvider : No /Users/summer/env/gerrit/review_site/etc/gerrit.config; assuming defaults</span><br><span class="line">Generating SSH host key ... rsa... ed25519... ecdsa 256... ecdsa 384... ecdsa 521... <span class="keyword">done</span></span><br><span class="line">Initialized /Users/summer/env/gerrit/review_site</span><br><span class="line">Reindexing projects:    100% (2/2)</span><br><span class="line">Reindexed 2 documents <span class="keyword">in</span> projects index <span class="keyword">in</span> 0.0s (44.4/s)</span><br><span class="line">Executing /Users/summer/env/gerrit/review_site/bin/gerrit.sh start</span><br><span class="line">Starting Gerrit Code Review: FAILED</span><br><span class="line">error: cannot start Gerrit: <span class="built_in">exit</span> status 1</span><br></pre></td></tr></table></figure><p>进入 /Users/summer/review_site/etc 目录，配置 gerrit.config</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[gerrit]</span><br><span class="line">basePath = git</span><br><span class="line">serverId = fa24d954-f249-4626-a0a8-3da22d50ab85</span><br><span class="line">canonicalWebUrl = http://gerrit.bmsoft.com</span><br><span class="line">[database]</span><br><span class="line"><span class="built_in">type</span> = h2</span><br><span class="line">database = /Users/summer/env/gerrit/review_site/db/ReviewDB</span><br><span class="line">[container]</span><br><span class="line">javaOptions = <span class="string">"-Dflogger.backend_factory=com.google.common.flogger.backend.log4j.Log4jBackendFactory#getInstance"</span></span><br><span class="line">javaOptions = <span class="string">"-Dflogger.logging_context=com.google.gerrit.server.logging.LoggingContext#getInstance"</span></span><br><span class="line">user = summer</span><br><span class="line">javaHome = /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre</span><br><span class="line">[index]</span><br><span class="line"><span class="built_in">type</span> = LUCENE</span><br><span class="line">[auth]</span><br><span class="line"><span class="built_in">type</span> = HTTP </span><br><span class="line">[receive]</span><br><span class="line">enableSignedPush = <span class="literal">false</span></span><br><span class="line">[sendemail]</span><br><span class="line">smtpServer = localhost</span><br><span class="line">[sshd]</span><br><span class="line">listenAddress = *:29418</span><br><span class="line">[httpd]</span><br><span class="line">listenUrl = http://*:8081/</span><br><span class="line">[cache]</span><br><span class="line">directory = cache</span><br><span class="line">[plugins]</span><br><span class="line">allowRemoteAdmin = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>启动 gerrit 服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh ~/review_site/bin/gerrit.sh start</span><br></pre></td></tr></table></figure><p>启动成功后访问 <a href="http://localhost:8081" target="_blank" rel="noopener">http://localhost:8081</a></p><p><img src="//cdn.jsdelivr.net/gh/summerandwinter/summerandwinter.github.io/assets/images/articles/gerrit_configuration_error.jpg" alt></p><h2 id="修改认证方式和反向代理"><a href="#修改认证方式和反向代理" class="headerlink" title="修改认证方式和反向代理"></a>修改认证方式和反向代理</h2><p>进入 /Users/summer/review_site/etc 目录，新建 passwd 文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch passwd</span><br></pre></td></tr></table></figure><p>添加账号密码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">htpasswd -b passwd admin admin</span><br></pre></td></tr></table></figure><p>修改 nginx 配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">      listen 80;</span><br><span class="line">      server_name gerrit.summer.com;</span><br><span class="line"></span><br><span class="line">      location ^~ / &#123;</span><br><span class="line">            auth_basic <span class="string">"Restricted"</span>;</span><br><span class="line">            auth_basic_user_file  /Users/summer/review_site/etc/passwd;</span><br><span class="line">        proxy_pass        http://127.0.0.1:8099;</span><br><span class="line">        proxy_set_header  X-Forwarded-For <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header  Host <span class="variable">$host</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>刷新 nginx 配置文件 </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>访问 <a href="http://gerrit.bmsoft.com" target="_blank" rel="noopener">http://gerrit.bmsoft.com</a> 输入账号密码登录，到这里 gerrit 的安装就完成了。</p><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><p>进入 /Users/summer/ 解压 gerrit.war包</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip gerrit.war -d gerrit</span><br></pre></td></tr></table></figure><p>在 /Users/summer/gerrit/WEB-INF/plugins 目录下有7个 jar 文件</p><h2 id="Gerrit-配置-SSH-KEY"><a href="#Gerrit-配置-SSH-KEY" class="headerlink" title="Gerrit 配置 SSH-KEY"></a>Gerrit 配置 SSH-KEY</h2><p>生成 rsa 公钥私钥对</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>公钥私钥默认存放在 ~/.ssh 目录 id_rsa id_rsa.pub， 拷贝公钥， 添加到 gerrit 中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pbcopy ~/ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>进入  /Users/summer/gerrit/WEB-INF/plugins 目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/gerrit/WEB-INF/plugins</span><br></pre></td></tr></table></figure><p>安装插件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -p 29418 admin@127.0.0.1 gerrit plugin install -n replication.jar $(<span class="built_in">pwd</span>)/replication.jar</span><br><span class="line">ssh -p 29418 admin@127.0.0.1 gerrit plugin install -n hooks.jar $(<span class="built_in">pwd</span>)/hooks.jar</span><br><span class="line">ssh -p 29418 admin@127.0.0.1 gerrit plugin install -n commit-message-length-validator.jar $(<span class="built_in">pwd</span>)/commit-message-length-validator.jar</span><br><span class="line">ssh -p 29418 admin@127.0.0.1 gerrit plugin install -n download-commands.jar $(<span class="built_in">pwd</span>)/download-commands.jar</span><br><span class="line">ssh -p 29418 admin@127.0.0.1 gerrit plugin install -n reviewnotes.jar $(<span class="built_in">pwd</span>)/reviewnotes.jar</span><br><span class="line">ssh -p 29418 admin@127.0.0.1 gerrit plugin install -n singleusergroup.jar $(<span class="built_in">pwd</span>)/singleusergroup.jar</span><br></pre></td></tr></table></figure><p>查看插件列表</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -p 29418 admin@127.0.0.1 gerrit plugin ls</span><br><span class="line">Name                           Version    Status   File</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">commit-message-length-validator v2.16.1    ENABLED  commit-message-length-validator.jar</span><br><span class="line">download-commands               v2.16.1    ENABLED  download-commands.jar</span><br><span class="line">hooks                          v2.16.1    ENABLED  hooks.jar</span><br><span class="line">replication                    v2.16.1    ENABLED  replication.jar</span><br><span class="line">reviewnotes                    v2.16.1    ENABLED  reviewnotes.jar</span><br><span class="line">singleusergroup                v2.16.1    ENABLED  singleusergroup.jar</span><br></pre></td></tr></table></figure><p>刷新 plugins</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -p 29418 admin@127.0.0.1 gerrit plugin reload</span><br></pre></td></tr></table></figure><p>或者重启服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./gerrit.sh restart</span><br></pre></td></tr></table></figure><h2 id="配置-replication"><a href="#配置-replication" class="headerlink" title="配置 replication"></a>配置 replication</h2><p>进入 /Users/summer/review_site/etc 目录，新增 replication.config 文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch replication.config</span><br></pre></td></tr></table></figure><p>配置如下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[remote <span class="string">"gitlab"</span>]</span><br><span class="line">    <span class="comment">#这里的git@gitlab.com:summerandwinter 就是官网gitlab ssh 地址</span></span><br><span class="line">    url = git@gitlab.com:summerandwinter/<span class="variable">$&#123;name&#125;</span>.git</span><br><span class="line">    push = +refs/heads/*:refs/heads/*</span><br><span class="line">    push = +refs/tags/*:refs/tags/*</span><br><span class="line">    push = +refs/changes/*:refs/changes/*</span><br><span class="line">    timtout = 30</span><br><span class="line">    threads = 3</span><br></pre></td></tr></table></figure><p>进入 ~/.ssh 目录，新增 config 文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch config</span><br></pre></td></tr></table></figure><h1 id="同步-Gitlab"><a href="#同步-Gitlab" class="headerlink" title="同步 Gitlab"></a>同步 Gitlab</h1><h2 id="gerrit上新建项目"><a href="#gerrit上新建项目" class="headerlink" title="gerrit上新建项目"></a>gerrit上新建项目</h2><p>Gerrit 上新建项目 nodejs-express</p><h3 id="同步Giblab-上同名项目结构"><a href="#同步Giblab-上同名项目结构" class="headerlink" title="同步Giblab 上同名项目结构"></a>同步Giblab 上同名项目结构</h3><p>进入 /Users/summer/env/gerrit/review_site/git</p><p>删除 nodejs-express.git 文件夹</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf nodejs-express.git</span><br></pre></td></tr></table></figure><p>克隆裸仓库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --bare git@gitlab.com:summerandwinter/nodejs-express.git</span><br></pre></td></tr></table></figure><p>刷新页面会发现 gitlab中的分支信息已经同步到gerrit上了</p><h2 id="将gitlab项目同步至本地"><a href="#将gitlab项目同步至本地" class="headerlink" title="将gitlab项目同步至本地"></a>将gitlab项目同步至本地</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git@gitlab.com:summerandwinter/nodejs-express.git</span><br></pre></td></tr></table></figure><h2 id="将远程仓库路径改为Gerrit项目仓库路径"><a href="#将远程仓库路径改为Gerrit项目仓库路径" class="headerlink" title="将远程仓库路径改为Gerrit项目仓库路径"></a>将远程仓库路径改为Gerrit项目仓库路径</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote <span class="built_in">set</span>-url origin ssh://admin@gerrit.bmsoft.com:29418/nodejs-express</span><br></pre></td></tr></table></figure><h2 id="检出所有分支"><a href="#检出所有分支" class="headerlink" title="检出所有分支"></a>检出所有分支</h2><h3 id="列出所有分支"><a href="#列出所有分支" class="headerlink" title="列出所有分支"></a>列出所有分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br><span class="line">  origin/HEAD -&gt; origin/master</span><br><span class="line">  origin/master</span><br></pre></td></tr></table></figure><h3 id="依次检出到本地"><a href="#依次检出到本地" class="headerlink" title="依次检出到本地"></a>依次检出到本地</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout HEAD</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><h3 id="推送所有分支和标签到Gerrit上"><a href="#推送所有分支和标签到Gerrit上" class="headerlink" title="推送所有分支和标签到Gerrit上"></a>推送所有分支和标签到Gerrit上</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push --all</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push --tags</span><br></pre></td></tr></table></figure><p>现在Gitlab上的项目已经成功同步到 gerrit 上了，现在从 gerrit 上 clone 代码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> ssh://admin@gerrit.bmsoft.com:29418/nodejs-express &amp;&amp; scp -p -P 29418 admin@gerrit.bmsoft.com:hooks/commit-msg nodejs-express/.git/hooks/</span><br><span class="line">Cloning into <span class="string">'nodejs-express'</span>...</span><br><span class="line">remote: Counting objects: 26, <span class="keyword">done</span></span><br><span class="line">remote: Finding sources: 100% (26/26)</span><br><span class="line">remote: Total 26 (delta 3), reused 26 (delta 3)</span><br><span class="line">Receiving objects: 100% (26/26), 4.79 KiB | 2.40 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">commit-msg                                    100% 1392     2.2MB/s   00:00</span><br></pre></td></tr></table></figure><p>修改项目中的一些文件，然后提交，这里提交的步骤跟正常的步骤没有不同</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add *</span><br><span class="line">git commit -m &apos;Make some change&apos;</span><br></pre></td></tr></table></figure><p>推送到 gerrit</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin master:refs/<span class="keyword">for</span>/master</span><br><span class="line">Counting objects: 3, <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 8 threads.</span><br><span class="line">Compressing objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 342 bytes | 342.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 2), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (2/2)</span><br><span class="line">remote: Processing changes: refs: 1, new: 1, <span class="keyword">done</span></span><br><span class="line">remote:</span><br><span class="line">remote: SUCCESS</span><br><span class="line">remote:</span><br><span class="line">remote: New Changes:</span><br><span class="line">remote:   http://gerrit.bmsoft.com/c/nodejs-express/+/1 一些改动</span><br><span class="line">To ssh://gerrit.bmsoft.com:29418/nodejs-express</span><br><span class="line"> * [new branch]      master -&gt; refs/<span class="keyword">for</span>/master</span><br></pre></td></tr></table></figure><p>这里需要提交到 refs/for/master 分支</p><p>刷新 gerrit 首页会看到我们刚刚的提交出现在了 Outgoing reviews 列表看到刚刚提交的修改</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;系统 macOS Mojave 版本 10.14.1&lt;/p&gt;
&lt;p&gt;jdk&lt;/p&gt;
&lt;figure class=&quot;highlight bas
      
    
    </summary>
    
      <category term="gerrit" scheme="https://summerandwinter.github.io/category/gerrit/"/>
    
    
      <category term="Mac" scheme="https://summerandwinter.github.io/tag/Mac/"/>
    
      <category term="gerrit" scheme="https://summerandwinter.github.io/tag/gerrit/"/>
    
      <category term="gitlab" scheme="https://summerandwinter.github.io/tag/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>Findbugs整理:Malicious Code Vulnerrability</title>
    <link href="https://summerandwinter.github.io/findbugs-malicious-code-vulnerrability.html"/>
    <id>https://summerandwinter.github.io/findbugs-malicious-code-vulnerrability.html</id>
    <published>2018-07-23T21:41:17.000Z</published>
    <updated>2019-11-28T08:58:49.415Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如果代码公开，可能受到恶意攻击的代码</p></blockquote><h1 id="EI-EXPOSE-REP2"><a href="#EI-EXPOSE-REP2" class="headerlink" title="EI_EXPOSE_REP2"></a>EI_EXPOSE_REP2</h1><blockquote><p>May expose internal representation by incorporating reference to mutable object<br>引用可变对象可能会暴露内部的实现</p></blockquote><p>This code stores a reference to an externally mutable object into the internal representation of the object.  If instances are accessed by untrusted code, and unchecked changes to the mutable object would compromise security or other important properties, you will need to do something different. Storing a copy of the object is better approach in many situations.</p><p>代码中对象中包含一个可变的引用类型属性，如果实例是由不受信任的代码访问，或者对可变对象做出未经检查的修改可能会导致安全问题。因此代码要做出一些修改比如：通常情况下引用这个对象的副本更好。</p><p>案例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pen</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Date <span class="title">getCreateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.createTime;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateTime</span><span class="params">(Date createTime)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Date date = <span class="keyword">new</span> Date(<span class="number">1538323200000L</span>); <span class="comment">// Mon Oct 01 00:00:00 CST 2018</span></span><br><span class="line">    System.out.println(date);</span><br><span class="line">    Pen pen = <span class="keyword">new</span> Pen();</span><br><span class="line">    pen.setCreateTime(date);</span><br><span class="line">    date.setTime(<span class="number">1506787200000L</span>); <span class="comment">// Sun Oct 01 00:00:00 CST 2017</span></span><br><span class="line">    System.out.println(date);</span><br><span class="line">    System.out.println(pen.getCreateTime());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mon Oct 01 00:00:00 CST 2018</span><br><span class="line">Sun Oct 01 00:00:00 CST 2017</span><br><span class="line">Sun Oct 01 00:00:00 CST 2017</span><br></pre></td></tr></table></figure><p>由此能发现 <code>date</code> 改变时 <code>pen</code> 中的 <code>createTime</code> 也跟着变了，因为 Java 中非基本类型都是通过引用传递</p><p>改进方案</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getCreateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (createTime != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Date(<span class="keyword">this</span>.createTime.getTime());</span><br><span class="line">      <span class="comment">//or</span></span><br><span class="line">      <span class="comment">//return (Date)this.createTime.clone()</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateTime</span><span class="params">(Date createTime)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (createTime != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.createTime = <span class="keyword">new</span> Date(createTime.getTime());</span><br><span class="line">      <span class="comment">// or</span></span><br><span class="line">      <span class="comment">// this.createTime = (Date)createTime.clone();</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.createTime = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>setCreateTime</code> 时不直接赋值，而是传入对象的一个副本。</p><h1 id="MS-PKGPROTECT"><a href="#MS-PKGPROTECT" class="headerlink" title="MS_PKGPROTECT"></a>MS_PKGPROTECT</h1><blockquote><p>Field should be package protected<br>静态字段要用 protected 修饰</p></blockquote><p>A mutable static field could be changed by malicious code or by accident. The field could be made package protected to avoid this vulnerability.</p><p><code>static</code> 修饰的字段如果时可变的容易被恶意代码或者自己无意的修改，为了避免这种风险这个字段需要用 <code>protected</code> 修饰</p><p>案例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span> DIGIT[] = &#123;<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>&#125;;</span><br></pre></td></tr></table></figure><p>改进方案</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span> DIGIT[] = &#123;<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      整理一些 Findbugs 的 Malicious Code Vulnerrability 校验点知识
    
    </summary>
    
      <category term="Findbugs" scheme="https://summerandwinter.github.io/category/Findbugs/"/>
    
    
      <category term="Findbugs" scheme="https://summerandwinter.github.io/tag/Findbugs/"/>
    
  </entry>
  
  <entry>
    <title>Findbugs整理:Bad Practice</title>
    <link href="https://summerandwinter.github.io/findbugs-bad-practice.html"/>
    <id>https://summerandwinter.github.io/findbugs-bad-practice.html</id>
    <published>2018-07-23T17:10:57.000Z</published>
    <updated>2019-11-28T08:58:49.415Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="Bad-practice"><a href="#Bad-practice" class="headerlink" title="Bad practice"></a>Bad practice</h1><h1 id="不好的习惯"><a href="#不好的习惯" class="headerlink" title="不好的习惯"></a>不好的习惯</h1><h2 id="Equals-method-should-not-assume-anything-about-the-type-of-its-argument"><a href="#Equals-method-should-not-assume-anything-about-the-type-of-its-argument" class="headerlink" title="Equals method should not assume anything about the type of its argument"></a>Equals method should not assume anything about the type of its argument</h2><h2 id="实现类的equals方法时，不应该对参数有任何的预先设定"><a href="#实现类的equals方法时，不应该对参数有任何的预先设定" class="headerlink" title="实现类的equals方法时，不应该对参数有任何的预先设定"></a>实现类的equals方法时，不应该对参数有任何的预先设定</h2><p>BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS<br>The equals(Object o) method shouldn’t make any assumptions about the type of o. It should simply return false if o is not the same type as this.</p><p>实现类的 <code>equals(Object o)</code> 方法时，不应该对参数有任何的预先设定,如果 <code>o</code> 的类型不是当前类的类型时应该直接返回 <code>false</code>。</p><p>案例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">   <span class="comment">// some code</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">     Foo other = (Foo) o;</span><br><span class="line">    <span class="comment">// the real equals code</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改进方案</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">   <span class="comment">// some code</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Foo )&#123;</span><br><span class="line">       <span class="comment">// the real equals code</span></span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果直接设定参数o肯定是Foo类的一个对象，在函数调用时，如果参数 <code>o</code> 不是一个 <code>Foo</code> 类或其子类，就会导致代码会抛出一个 <code>ClassCastException</code> 。因此在实现 <code>equals</code> 方法，应该加一个判断，如果参数 <code>o</code> 不是一个 <code>Foo</code> 类对象，则返回 <code>false</code>。</p><h2 id="Check-for-sign-of-bitwise-operation"><a href="#Check-for-sign-of-bitwise-operation" class="headerlink" title="Check for sign of bitwise operation"></a>Check for sign of bitwise operation</h2><h2 id="检查位操作符运行是否合理"><a href="#检查位操作符运行是否合理" class="headerlink" title="检查位操作符运行是否合理"></a>检查位操作符运行是否合理</h2><p>BIT_SIGNED_CHECK</p><p>案例<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">((event.detail &amp; SWT.SELECTED) &gt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><p>上面的案例判断语句中使用了位操作，并且进行了 <code>&gt;0</code>  的比较。这个语句的本意应该是两个数字进行与操作后是否还有非0的位数，但是如果与操作后的结果为负数时就会变成一个 BUG , 最好用 <code>!=0</code> 替换  <code>&gt;0</code>。</p><h2 id="Class-implements-Cloneable-but-does-not-define-or-use-clone-method"><a href="#Class-implements-Cloneable-but-does-not-define-or-use-clone-method" class="headerlink" title="Class implements Cloneable but does not define or use clone method"></a>Class implements Cloneable but does not define or use clone method</h2><h2 id="类实现了-Cloneable-接口但是没有声明或使用到-clone-方法"><a href="#类实现了-Cloneable-接口但是没有声明或使用到-clone-方法" class="headerlink" title="类实现了 Cloneable 接口但是没有声明或使用到 clone 方法"></a>类实现了 <code>Cloneable</code> 接口但是没有声明或使用到 <code>clone</code> 方法</h2><p>CN_IDIOM</p><p>按照惯例，实现此接口的类应该使用公共方法重写 Object.clone（它是受保护的），以获得有关重写此方法的详细信息。因为 <code>clone</code> 方法是 <code>Object</code> 类的方法，所以当前类不去声明这个方法，不会编译不通过。但是，<code>clone</code> 是需要逐个字段去复制的，所以没有声明<code>clone</code> 方法是不对的。</p><h2 id="clone-method-does-not-call-super-clone"><a href="#clone-method-does-not-call-super-clone" class="headerlink" title="clone method does not call super.clone()"></a>clone method does not call super.clone()</h2><h2 id="clone-方法中没有调用-super-clone-方法"><a href="#clone-方法中没有调用-super-clone-方法" class="headerlink" title="clone 方法中没有调用 super.clone() 方法"></a>clone 方法中没有调用 super.clone() 方法</h2><p>CN_IDIOM_NO_SUPER_CALL</p><p>This non-final class defines a clone() method that does not call super.clone(). If this class (“A”) is extended by a subclass (“B”), and the subclass B calls super.clone(), then it is likely that B’s clone() method will return an object of type A, which violates the standard contract for clone().</p><p>If all clone() methods call super.clone(), then they are guaranteed to use Object.clone(), which always returns an object of the correct type.</p><p>非final的类，定义了clone()方法，却在方法中没有调用super.clone()。<br>看上去，不应该调用super.clone()。如果A是B的父类，那么B调用super.clone()，则B的clone方法返回的是A的实例，看上去是错的。<br>但是，如果所有的clone()方法都调用了super.clone()，则最终调用的是Object.clone()，那就能返回正确的类型。</p><h2 id="CN-IMPLEMENTS-CLONE-BUT-NOT-CLONEABLE"><a href="#CN-IMPLEMENTS-CLONE-BUT-NOT-CLONEABLE" class="headerlink" title="CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE"></a>CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE</h2><blockquote><p>Class defines clone() but doesn’t implement Cloneable<br>类定义了clone()方法，但是没有声明实现Cloneable接口</p></blockquote><p>This class defines a clone() method but the class doesn’t implement Cloneable. There are some situations in which this is OK (e.g., you want to control how subclasses can clone themselves), but just make sure that this is what you intended.</p><p>这个不是个什麽大问题，只是确认一下是不是漏了声明。</p>]]></content>
    
    <summary type="html">
    
      整理一些 Findbugs 的 Bad practice 校验点知识
    
    </summary>
    
      <category term="Findbugs" scheme="https://summerandwinter.github.io/category/Findbugs/"/>
    
    
      <category term="Findbugs" scheme="https://summerandwinter.github.io/tag/Findbugs/"/>
    
  </entry>
  
  <entry>
    <title>中文文案排版指南</title>
    <link href="https://summerandwinter.github.io/chinese-copywriting-guidelines.html"/>
    <id>https://summerandwinter.github.io/chinese-copywriting-guidelines.html</id>
    <published>2018-01-17T17:05:45.000Z</published>
    <updated>2019-11-28T08:58:49.415Z</updated>
    
    <content type="html"><![CDATA[<p>统一中文文案、排版的相关用法，降低团队成员之间的沟通成本，增强网站气质。</p><h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><p>「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。与大家共勉之。」——<a href="https://github.com/vinta/pangu.js" target="_blank" rel="noopener">vinta/paranoid-auto-spacing</a></p><h3 id="中英文之间需要增加空格"><a href="#中英文之间需要增加空格" class="headerlink" title="中英文之间需要增加空格"></a>中英文之间需要增加空格</h3><p>正确：</p><blockquote><p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。</p></blockquote><p>错误：</p><blockquote><p>在LeanCloud上，数据存储是围绕<code>AVObject</code>进行的。<br>在 LeanCloud上，数据存储是围绕<code>AVObject</code> 进行的。</p></blockquote><p>完整的正确用法：</p><blockquote><p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。每个 <code>AVObject</code> 都包含了与 JSON 兼容的 key-value 对应的数据。数据是 schema-free 的，你不需要在每个 <code>AVObject</code> 上提前指定存在哪些键，只要直接设定对应的 key-value 即可。</p></blockquote><p>例外：「豆瓣FM」等产品名词，按照官方所定义的格式书写。</p><h3 id="中文与数字之间需要增加空格"><a href="#中文与数字之间需要增加空格" class="headerlink" title="中文与数字之间需要增加空格"></a>中文与数字之间需要增加空格</h3><p>正确：</p><blockquote><p>今天出去买菜花了 5000 元。</p></blockquote><p>错误：</p><blockquote><p>今天出去买菜花了 5000元。<br>今天出去买菜花了5000元。</p></blockquote><h3 id="数字与单位之间需要增加空格"><a href="#数字与单位之间需要增加空格" class="headerlink" title="数字与单位之间需要增加空格"></a>数字与单位之间需要增加空格</h3><p>正确：</p><blockquote><p>我家的光纤入户宽带有 10 Gbps，SSD 一共有 20 TB。</p></blockquote><p>错误：</p><blockquote><p>我家的光纤入户宽带有 10Gbps，SSD 一共有 10TB。</p></blockquote><p>例外：度／百分比与数字之间不需要增加空格：</p><p>正确：</p><blockquote><p>今天是 233° 的高温。<br>新 MacBook Pro 有 15% 的 CPU 性能提升。</p></blockquote><p>错误：</p><blockquote><p>今天是 233 ° 的高温。<br>新 MacBook Pro 有 15 % 的 CPU 性能提升。</p></blockquote><h3 id="全角标点与其他字符之间不加空格"><a href="#全角标点与其他字符之间不加空格" class="headerlink" title="全角标点与其他字符之间不加空格"></a>全角标点与其他字符之间不加空格</h3><p>正确：</p><blockquote><p>刚刚买了一部 iPhone，好开心！</p></blockquote><p>错误：</p><blockquote><p>刚刚买了一部 iPhone ，好开心！</p></blockquote><h3 id="ms-text-autospace-to-the-rescue"><a href="#ms-text-autospace-to-the-rescue" class="headerlink" title="-ms-text-autospace to the rescue?"></a>-ms-text-autospace to the rescue?</h3><p>Microsoft 有个 <a href="http://msdn.microsoft.com/en-us/library/ie/ms531164.aspx" target="_blank" rel="noopener"><code>-ms-text-autospace</code></a> 的 CSS 属性可以实现自动为中英文之间增加空白。不过目前并未普及，另外在其他应用场景，例如 OS X、iOS 的用户界面目前并不存在这个特性，所以请继续保持随手加空格的习惯。</p><h2 id="标点符号"><a href="#标点符号" class="headerlink" title="标点符号"></a>标点符号</h2><h3 id="不重复使用标点符号"><a href="#不重复使用标点符号" class="headerlink" title="不重复使用标点符号"></a>不重复使用标点符号</h3><p>正确：</p><blockquote><p>德国队竟然战胜了巴西队！<br>她竟然对你说「喵」？！</p></blockquote><p>错误：</p><blockquote><p>德国队竟然战胜了巴西队！！<br>德国队竟然战胜了巴西队！！！！！！！！<br>她竟然对你说「喵」？？！！<br>她竟然对你说「喵」？！？！？？！！</p></blockquote><h2 id="全角和半角"><a href="#全角和半角" class="headerlink" title="全角和半角"></a>全角和半角</h2><p>不明白什么是全角（全形）与半角（半形）符号？请查看维基百科词条『<a href="http://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2" target="_blank" rel="noopener">全角和半角</a>』。</p><h3 id="使用全角中文标点"><a href="#使用全角中文标点" class="headerlink" title="使用全角中文标点"></a>使用全角中文标点</h3><p>正确：</p><blockquote><p>嗨！你知道嘛？今天前台的小妹跟我说「喵」了哎！<br>核磁共振成像（NMRI）是什么原理都不知道？JFGI！</p></blockquote><p>错误：</p><blockquote><p>嗨! 你知道嘛? 今天前台的小妹跟我说 “喵” 了哎!<br>嗨!你知道嘛?今天前台的小妹跟我说”喵”了哎!<br>核磁共振成像 (NMRI) 是什么原理都不知道? JFGI!<br>核磁共振成像(NMRI)是什么原理都不知道?JFGI!</p></blockquote><h3 id="数字使用半角字符"><a href="#数字使用半角字符" class="headerlink" title="数字使用半角字符"></a>数字使用半角字符</h3><p>正确：</p><blockquote><p>这件蛋糕只卖 1000 元。</p></blockquote><p>错误：</p><blockquote><p>这件蛋糕只卖 １０００ 元。</p></blockquote><p>例外：在设计稿、宣传海报中如出现极少量数字的情形时，为方便文字对齐，是可以使用全角数字的。</p><h3 id="遇到完整的英文整句、特殊名词，其內容使用半角标点"><a href="#遇到完整的英文整句、特殊名词，其內容使用半角标点" class="headerlink" title="遇到完整的英文整句、特殊名词，其內容使用半角标点"></a>遇到完整的英文整句、特殊名词，其內容使用半角标点</h3><p>正确：</p><blockquote><p>乔布斯那句话是怎么说的？「Stay hungry, stay foolish.」<br>推荐你阅读《Hackers &amp; Painters: Big Ideas from the Computer Age》，非常的有趣。</p></blockquote><p>错误：</p><blockquote><p>乔布斯那句话是怎么说的？「Stay hungry，stay foolish。」<br>推荐你阅读《Hackers＆Painters：Big Ideas from the Computer Age》，非常的有趣。</p></blockquote><h2 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h2><h3 id="专有名词使用正确的大小写"><a href="#专有名词使用正确的大小写" class="headerlink" title="专有名词使用正确的大小写"></a>专有名词使用正确的大小写</h3><p>大小写相关用法原属于英文书写范畴，不属于本 wiki 讨论內容，在这里只对部分易错用法进行简述。</p><p>正确：</p><blockquote><p>使用 GitHub 登录<br>我们的客户有 GitHub、Foursquare、Microsoft Corporation、Google、Facebook, Inc.。</p></blockquote><p>错误：</p><blockquote><p>使用 github 登录<br>使用 GITHUB 登录<br>使用 Github 登录<br>使用 gitHub 登录<br>使用 gｲんĤЦ8 登录<br>我们的客户有 github、foursquare、microsoft corporation、google、facebook, inc.。<br>我们的客户有 GITHUB、FOURSQUARE、MICROSOFT CORPORATION、GOOGLE、FACEBOOK, INC.。<br>我们的客户有 Github、FourSquare、MicroSoft Corporation、Google、FaceBook, Inc.。<br>我们的客户有 gitHub、fourSquare、microSoft Corporation、google、faceBook, Inc.。<br>我们的客户有 gｲんĤЦ8、ｷouЯƧquﾑгє、๓เςг๏ร๏Ŧt ς๏гק๏гคtเ๏ภn、900913、ƒ4ᄃëв๏๏к, IПᄃ.。</p></blockquote><p>注意：当网页中需要配合整体视觉风格而出现全部大写／小写的情形，HTML 中请使用标准的大小写规范进行书写；并通过 <code>text-transform: uppercase;</code>／<code>text-transform: lowercase;</code> 对表现形式进行定义。</p><h3 id="不要使用不地道的缩写"><a href="#不要使用不地道的缩写" class="headerlink" title="不要使用不地道的缩写"></a>不要使用不地道的缩写</h3><p>正确：</p><blockquote><p>我们需要一位熟悉 JavaScript、HTML5，至少理解一种框架（如 Backbone.js、AngularJS、React 等）的前端开发者。</p></blockquote><p>错误：</p><blockquote><p>我们需要一位熟悉 Js、h5，至少理解一种框架（如 backbone、angular、RJS 等）的 FED。</p></blockquote><h2 id="争议"><a href="#争议" class="headerlink" title="争议"></a>争议</h2><p>以下用法略带有个人色彩，即：无论是否遵循下述规则，从语法的角度来讲都是<strong>正确</strong>的。</p><h3 id="链接之间增加空格"><a href="#链接之间增加空格" class="headerlink" title="链接之间增加空格"></a>链接之间增加空格</h3><p>用法：</p><blockquote><p>请 <a href="#">提交一个 issue</a> 并分配给相关同事。<br>访问我们网站的最新动态，请 <a href="#">点击这里</a> 进行订阅！</p></blockquote><p>对比用法：</p><blockquote><p>请<a href="#">提交一个 issue</a> 并分配给相关同事。<br>访问我们网站的最新动态，请<a href="#">点击这里</a>进行订阅！</p></blockquote><h3 id="简体中文使用直角引号"><a href="#简体中文使用直角引号" class="headerlink" title="简体中文使用直角引号"></a>简体中文使用直角引号</h3><p>用法：</p><blockquote><p>「老师，『有条不紊』的『紊』是什么意思？」</p></blockquote><p>对比用法：</p><blockquote><p>“老师，‘有条不紊’的‘紊’是什么意思？”</p></blockquote><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><table><thead><tr><th>仓库</th><th>语言</th></tr></thead><tbody><tr><td><a href="https://github.com/vinta/paranoid-auto-spacing" target="_blank" rel="noopener">vinta/paranoid-auto-spacing</a></td><td>JavaScript</td></tr><tr><td><a href="https://github.com/huei90/pangu.node" target="_blank" rel="noopener">huei90/pangu.node</a></td><td>Node.js</td></tr><tr><td><a href="https://github.com/huacnlee/auto-correct" target="_blank" rel="noopener">huacnlee/auto-correct</a></td><td>Ruby</td></tr><tr><td><a href="https://github.com/sparanoid/space-lover" target="_blank" rel="noopener">sparanoid/space-lover</a></td><td>PHP (WordPress)</td></tr><tr><td><a href="https://github.com/NauxLiu/auto-correct" target="_blank" rel="noopener">nauxliu/auto-correct</a></td><td>PHP</td></tr><tr><td><a href="https://github.com/ricoa/copywriting-correct" target="_blank" rel="noopener">ricoa/copywriting-correct</a></td><td>PHP</td></tr><tr><td><a href="https://github.com/hotoo/pangu.vim" target="_blank" rel="noopener">hotoo/pangu.vim</a></td><td>Vim</td></tr><tr><td><a href="https://github.com/sparanoid/grunt-auto-spacing" target="_blank" rel="noopener">sparanoid/grunt-auto-spacing</a></td><td>Node.js (Grunt)</td></tr><tr><td><a href="https://github.com/hjiang/scripts/blob/master/add-space-between-latin-and-cjk" target="_blank" rel="noopener">hjiang/scripts/add-space-between-latin-and-cjk</a></td><td>Python</td></tr></tbody></table><h2 id="谁在这样做？"><a href="#谁在这样做？" class="headerlink" title="谁在这样做？"></a>谁在这样做？</h2><table><thead><tr><th>网站</th><th>文案</th><th>UGC</th></tr></thead><tbody><tr><td><a href="http://www.apple.com/cn/" target="_blank" rel="noopener">Apple 中国</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="http://www.apple.com/hk/" target="_blank" rel="noopener">Apple 香港</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="http://www.apple.com/tw/" target="_blank" rel="noopener">Apple 台湾</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="http://www.microsoft.com/zh-cn/" target="_blank" rel="noopener">Microsoft 中国</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="http://www.microsoft.com/zh-hk/" target="_blank" rel="noopener">Microsoft 香港</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="http://www.microsoft.com/zh-tw/" target="_blank" rel="noopener">Microsoft 台湾</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="https://www.zhihu.com/" target="_blank" rel="noopener">知乎</a></td><td>Yes</td><td>部分用户达成</td></tr><tr><td><a href="https://www.v2ex.com/" target="_blank" rel="noopener">V2EX</a></td><td>Yes</td><td>Yes</td></tr><tr><td><a href="https://segmentfault.com/" target="_blank" rel="noopener">SegmentFault</a></td><td>Yes</td><td>部分用户达成</td></tr><tr><td><a href="http://apple4us.com/" target="_blank" rel="noopener">Apple4us</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="https://www.wandoujia.com/" target="_blank" rel="noopener">豌豆荚</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="https://ruby-china.org/" target="_blank" rel="noopener">Ruby China</a></td><td>Yes</td><td>标题达成</td></tr><tr><td><a href="https://phphub.org/" target="_blank" rel="noopener">PHPHub</a></td><td>Yes</td><td>标题达成</td></tr><tr><td><a href="http://sspai.com/" target="_blank" rel="noopener">少数派</a></td><td>Yes</td><td>N/A</td></tr></tbody></table><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="http://grammar.about.com/od/punctuationandmechanics/a/Guidelines-For-Using-Capital-Letters.htm" target="_blank" rel="noopener">Guidelines for Using Capital Letters</a></li><li><a href="http://en.wikipedia.org/wiki/Letter_case" target="_blank" rel="noopener">Letter case - Wikipedia</a></li><li><a href="http://www.oxforddictionaries.com/words/punctuation" target="_blank" rel="noopener">Punctuation - Oxford Dictionaries</a></li><li><a href="https://owl.english.purdue.edu/owl/section/1/6/" target="_blank" rel="noopener">Punctuation - The Purdue OWL</a></li><li><a href="http://www.wikihow.com/Use-English-Punctuation-Correctly" target="_blank" rel="noopener">How to Use English Punctuation Corrently - wikiHow</a></li><li><a href="https://zh.opensuse.org/index.php?title=Help:%E6%A0%BC%E5%BC%8F" target="_blank" rel="noopener">格式 - openSUSE</a></li><li><a href="http://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2" target="_blank" rel="noopener">全角和半角 - 维基百科</a></li><li><a href="http://zh.wikipedia.org/wiki/%E5%BC%95%E8%99%9F" target="_blank" rel="noopener">引号 - 维基百科</a></li><li><a href="http://zh.wikipedia.org/wiki/%E7%96%91%E5%95%8F%E9%A9%9A%E5%98%86%E8%99%9F" target="_blank" rel="noopener">疑问惊叹号 - 维基百科</a></li></ul><h2 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h2><p><a href="https://github.com/mzlogin/chinese-copywriting-guidelines/blob/Simplified/README.md" target="_blank" rel="noopener">中文文案排版指北</a></p>]]></content>
    
    <summary type="html">
    
      统一中文文案、排版的相关用法，降低团队成员之间的沟通成本，增强网站气质。
    
    </summary>
    
    
      <category term="中文排版" scheme="https://summerandwinter.github.io/tag/%E4%B8%AD%E6%96%87%E6%8E%92%E7%89%88/"/>
    
  </entry>
  
  <entry>
    <title>Mac环境nginx实现图片裁剪和缓存</title>
    <link href="https://summerandwinter.github.io/build-nginx-with-image-filter-in-mac.html"/>
    <id>https://summerandwinter.github.io/build-nginx-with-image-filter-in-mac.html</id>
    <published>2018-01-06T22:29:09.000Z</published>
    <updated>2019-11-28T08:58:49.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装tap"><a href="#安装tap" class="headerlink" title="安装tap"></a>安装tap</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew tap homebrew/nginx</span><br></pre></td></tr></table></figure><h1 id="安装gd"><a href="#安装gd" class="headerlink" title="安装gd"></a>安装gd</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install gd</span><br></pre></td></tr></table></figure><h1 id="安装nginx和image-filter模块"><a href="#安装nginx和image-filter模块" class="headerlink" title="安装nginx和image-filter模块"></a>安装nginx和image-filter模块</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install nginx-full --with-gd --with-image-filter</span><br></pre></td></tr></table></figure><h1 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8088;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        # 匹配 /img/image.jpg@500-500形式的链接</span><br><span class="line">        location ~ &quot;^/img/(?&lt;image&gt;.+)@(?&lt;width&gt;\d+)-(?&lt;height&gt;\d+)$&quot; &#123;</span><br><span class="line">        # 定位到 /img/image.jpg</span><br><span class="line">            alias /usr/local/var/www/img/$image;</span><br><span class="line">            # 裁剪</span><br><span class="line">            image_filter crop $width $height;</span><br><span class="line">            image_filter_jpeg_quality 75;</span><br><span class="line">            image_filter_buffer 8M;</span><br><span class="line">            error_page   415 = /empty;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location = /empty &#123;</span><br><span class="line">            empty_gif;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 定义缓存目录</span><br><span class="line">    proxy_cache_path /usr/local/var/www/nginx-images-cache/ levels=1:2 keys_zone=images:10m inactive=24h max_size=100m;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        # Public-facing cache server.</span><br><span class="line">        listen       8888;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        # Only serve widths of 768 or 1920 so we can cache effectively.</span><br><span class="line">        location ~ &quot;^/img/(?&lt;image&gt;.+)@(?&lt;width&gt;\d+)-(?&lt;height&gt;\d+)$&quot; &#123;</span><br><span class="line">            # Proxy to internal image resizing server.</span><br><span class="line">            proxy_pass http://localhost:8088/img/$image@$width-$height;</span><br><span class="line">            proxy_cache images;</span><br><span class="line">            proxy_cache_valid 200 24h;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /img &#123;</span><br><span class="line">            # Nginx needs you to manually define DNS resolution when using</span><br><span class="line">            # variables in proxy_pass. Creating this dummy location avoids that.</span><br><span class="line">            # The error is: &quot;no resolver defined to resolve localhost&quot;.</span><br><span class="line">            proxy_pass http://localhost:8088/;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动nginx</p><p>访问<a href="http://localhost:8088/img/1.jpg@500-500" target="_blank" rel="noopener">http://localhost:8088/img/1.jpg@500-500</a>查看裁剪过的图片<br>访问<a href="http://localhost:8888/img/1.jpg@500-500" target="_blank" rel="noopener">http://localhost:8888/img/1.jpg@500-500</a>查看缓存效果</p>]]></content>
    
    <summary type="html">
    
      介绍在Mac环境下通过nginx搭建图片服务器的整个过程，并通过nginx的image-filter模块实现对图片简单裁剪和图片缓存
    
    </summary>
    
      <category term="nginx" scheme="https://summerandwinter.github.io/category/nginx/"/>
    
    
      <category term="Mac" scheme="https://summerandwinter.github.io/tag/Mac/"/>
    
      <category term="nginx" scheme="https://summerandwinter.github.io/tag/nginx/"/>
    
      <category term="image-filter" scheme="https://summerandwinter.github.io/tag/image-filter/"/>
    
  </entry>
  
  <entry>
    <title>ImageMagick学习</title>
    <link href="https://summerandwinter.github.io/imagemagick-learning.html"/>
    <id>https://summerandwinter.github.io/imagemagick-learning.html</id>
    <published>2018-01-05T10:06:33.000Z</published>
    <updated>2019-11-28T08:58:49.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="convert"><a href="#convert" class="headerlink" title="convert"></a>convert</h1><h2 id="图片拼接"><a href="#图片拼接" class="headerlink" title="图片拼接"></a>图片拼接</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick img.jpg img2.jpg -background <span class="string">'#ffffff'</span> -gravity Center +append dest.jpg</span><br></pre></td></tr></table></figure><p>把图片<code>img.jpg</code> 和<code>img2.jpg</code> 按从左到右的顺序拼接在一起<br>如果图片高度不一致，高度低的图片用<code>-background</code>填充至与高度最高的图片对齐，已<code>-gravity</code>方式对齐。<br><code>-background</code> 的写法 <code>white</code>, <code>#ffffff</code>, <code>rgb(255, 255, 255)</code><br><code>-gravity</code> 可选的参数有 <code>NorthWest</code>, <code>North</code>, <code>NorthEast</code>, <code>West</code>, <code>Center</code>, <code>East</code>, <code>SouthWest</code>, <code>South</code>, <code>SouthEast</code></p><blockquote><p>PS:这篇文章的示例图片就是用这种方法拼出来的</p></blockquote><h2 id="反色"><a href="#反色" class="headerlink" title="反色"></a>反色</h2><p>形成底片效果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick source.jpeg -negate negate.png</span><br></pre></td></tr></table></figure><p><img src="//cdn.jsdelivr.net/gh/summerandwinter/summerandwinter.github.io/assets/images/articles/imagemagick/negate.jpg?v4" alt="反色效果"></p><h2 id="加边框"><a href="#加边框" class="headerlink" title="加边框"></a>加边框</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick source.jpeg -mattecolor <span class="string">"#000000"</span> -frame 60x60 mattecolor.jpg</span><br></pre></td></tr></table></figure><p><code>#000000</code>边框颜色 <code>60x60</code> 边框宽度</p><p><img src="//cdn.jsdelivr.net/gh/summerandwinter/summerandwinter.github.io/assets/images/articles/imagemagick/mattecolor.jpg?v4" alt="加边框"></p><p>下面是加边框的另外方式实现方式</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick source.jpeg -border 60x60 -bordercolor <span class="string">"#000000"</span> border.jpg</span><br></pre></td></tr></table></figure><p><img src="//cdn.jsdelivr.net/gh/summerandwinter/summerandwinter.github.io/assets/images/articles/imagemagick/border.jpg?v4" alt="加边框"></p><h2 id="单色"><a href="#单色" class="headerlink" title="单色"></a>单色</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick  source.jpeg -monochrome monochrome.png</span><br></pre></td></tr></table></figure><p><img src="//cdn.jsdelivr.net/gh/summerandwinter/summerandwinter.github.io/assets/images/articles/imagemagick/monochrome.jpg?v4" alt="单色"></p><h2 id="噪点"><a href="#噪点" class="headerlink" title="噪点"></a>噪点</h2><p>添加噪点</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick source.jpeg +noise Gaussian noise.png</span><br></pre></td></tr></table></figure><p>可选的参数如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Gaussian</span><br><span class="line">Impulse</span><br><span class="line">Laplacian</span><br><span class="line">Multiplicative</span><br><span class="line">Poisson</span><br><span class="line">Random</span><br><span class="line">Uniform</span><br></pre></td></tr></table></figure></p><p>去除噪点<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick source.jpeg -statistic Nonpeak 10  noiseless.jpg</span><br></pre></td></tr></table></figure></p><p><img src="//cdn.jsdelivr.net/gh/summerandwinter/summerandwinter.github.io/assets/images/articles/imagemagick/noise.jpg?v4" alt="噪点"></p><h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick source.jpeg -rotate 30 rotate.jpg</span><br></pre></td></tr></table></figure><p><img src="//cdn.jsdelivr.net/gh/summerandwinter/summerandwinter.github.io/assets/images/articles/imagemagick/rotate.jpg?v4" alt="旋转"></p><h2 id="翻转"><a href="#翻转" class="headerlink" title="翻转"></a>翻转</h2><p>上下翻转</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick source.jpeg -flip flip.jpg</span><br></pre></td></tr></table></figure><p><img src="//cdn.jsdelivr.net/gh/summerandwinter/summerandwinter.github.io/assets/images/articles/imagemagick/flip.jpg?v4" alt="上下翻转"></p><p>左右翻转</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick source.jpeg -flop flop.jpg</span><br></pre></td></tr></table></figure><p><img src="//cdn.jsdelivr.net/gh/summerandwinter/summerandwinter.github.io/assets/images/articles/imagemagick/flop.jpg?v4" alt="左右翻转"></p><h2 id="油画效果"><a href="#油画效果" class="headerlink" title="油画效果"></a>油画效果</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick source.jpeg -paint 4 paint.jpg</span><br></pre></td></tr></table></figure><p>数字越大色块越大</p><p><img src="//cdn.jsdelivr.net/gh/summerandwinter/summerandwinter.github.io/assets/images/articles/imagemagick/paint.jpg?v4" alt="油画效果"></p><h2 id="炭笔效果"><a href="#炭笔效果" class="headerlink" title="炭笔效果"></a>炭笔效果</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick source.jpeg -charcoal 2 charcoal.jpg</span><br></pre></td></tr></table></figure><p>数字越大笔触越大<br><img src="//cdn.jsdelivr.net/gh/summerandwinter/summerandwinter.github.io/assets/images/articles/imagemagick/charcoal.jpg?v4" alt="炭笔效果"></p><h2 id="散射"><a href="#散射" class="headerlink" title="散射"></a>散射</h2><p>毛玻璃效果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick source.jpeg -spread 30 spread.jpg</span><br></pre></td></tr></table></figure><p>数字越大越模糊<br><img src="//cdn.jsdelivr.net/gh/summerandwinter/summerandwinter.github.io/assets/images/articles/imagemagick/spread.jpg?v4" alt="毛玻璃效果"></p><h2 id="漩涡"><a href="#漩涡" class="headerlink" title="漩涡"></a>漩涡</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick source.jpeg -swirl 67 swril.jpg</span><br></pre></td></tr></table></figure><p>数字越大扭曲得越严重<br><img src="//cdn.jsdelivr.net/gh/summerandwinter/summerandwinter.github.io/assets/images/articles/imagemagick/swril.jpg?v4" alt="漩涡效果"></p><h2 id="凸起效果"><a href="#凸起效果" class="headerlink" title="凸起效果"></a>凸起效果</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick source.jpeg -raise 5x5 raise.jpg</span><br></pre></td></tr></table></figure><p>执行后，你会看到，照片的四周会一个5x5的边，如果你要一个凹下去的边，把-raise改为+raise就可以了。其实凸边和凹边看起来区别并不是很大。</p><p><img src="//cdn.jsdelivr.net/gh/summerandwinter/summerandwinter.github.io/assets/images/articles/imagemagick/raise.jpg?v4" alt="凸起效果"></p>]]></content>
    
    <summary type="html">
    
      记录一些在学习magick过程中用到的使用的技巧留作备忘
    
    </summary>
    
      <category term="ImageMagick" scheme="https://summerandwinter.github.io/category/ImageMagick/"/>
    
    
      <category term="ImageMagick" scheme="https://summerandwinter.github.io/tag/ImageMagick/"/>
    
  </entry>
  
  <entry>
    <title>学习Git</title>
    <link href="https://summerandwinter.github.io/learn-git.html"/>
    <id>https://summerandwinter.github.io/learn-git.html</id>
    <published>2016-12-12T13:43:36.000Z</published>
    <updated>2019-11-28T08:58:49.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>首先介绍一些关于Git的基本概念，方便后面的学习。<br>Git中有三种状态：</p><ol><li><code>已提交（commited）</code> 表示数据已安全的保存在本地数据库中。</li><li><code>已修改（modified）</code> 表示修改了文件，还没保存到本地数据库中。</li><li><code>已暂存（staged）</code> 表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li></ol><p>由此可以把一个Git项目看作由三部分组成</p><ol><li><code>工作目录</code>（Working Directory）<br>顾名思义这里就是我们的工作区域，可以这样理解，在这里我们不用分心去考虑版本控制的事，只用专心完成自己工作，因为这里的内容只是整个项目的某一个版本，我们可以放心的修改而不用担心对其他版本产生影响。</li><li><code>暂存区</code>（Staging Area）<br>实际上它只是一个文件，通常情况下这个文件在仓库目录中，它的作用是告诉Git在下次执行<code>commit</code>时需要放入仓库的内容。我们可以把它理解为我们在工作目录对文件所做改动的一个索引。</li><li><code>仓库</code>（Repository）<br>Git 用来保存项目的元数据和对象数据库的地方，通过这种方式来永久保存项目中不同版本的内容。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。</li></ol><p>Git的工作流程大致是：</p><ol><li><p>在工作目录中修改文件。</p></li><li><p>暂存文件，将文件的快照放入暂存区域。</p></li><li><p>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库。</p></li></ol><p><img src="//cdn.jsdelivr.net/gh/summerandwinter/summerandwinter.github.io/assets/images/articles/git_workflow.svg" alt="Git工作流程"></p><h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><h2 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h2><p>Git 自带一个 <code>git config</code> 的工具来帮助设置控制 Git 外观和行为的配置变量。 这些变量存储在三个不同的位置：</p><ol><li><p><code>/etc/gitconfig</code> 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 <code>--system</code> 选项的 <code>git config</code>时，它会从此文件读写配置变量。</p></li><li><p><code>~/.gitconfig</code> 或 <code>~/.config/git/config</code> 文件：只针对当前用户。 可以传递 –global 选项让 Git 读写此文件。</p></li><li><p>当前使用仓库的 Git 目录中的 <code>config</code> 文件（就是 .git/config）：针对该仓库。<br>每一个级别覆盖上一级别的配置，所以 .git/config 的配置变量会覆盖 /etc/gitconfig 中的配置变量。</p></li></ol><blockquote><p>在 Windows 系统中，Git 会查找 $HOME 目录下（一般情况下是 C:\Users\$USER）的 .gitconfig 文件。 Git 同样也会寻找 /etc/gitconfig 文件，但只限于 MSys 的根目录下，即安装 Git 时所选的目标位置。</p></blockquote><p>配置用户信息<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"winter"</span></span><br><span class="line">git config --global user.email winter@example.com</span><br></pre></td></tr></table></figure></p><p>配置文本编辑器<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global core.editor emacs</span><br></pre></td></tr></table></figure></p><p>检查配置信息<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure></p><p>或者只检查某一项<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br></pre></td></tr></table></figure></p><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>Git通过 <code>.gitignore</code> 文件来管理需要忽略的文件模式，我们通过一些规则来告诉Git哪些文件不需要列入追踪列表。<br>文件 <code>.gitignore</code> 的格式规范如下：</p><ul><li>所有空行或者以 <code>#</code> 开头的行都会被 <code>Git</code> 忽略。</li><li>可以使用标准的 <code>glob</code> 模式匹配。</li><li>匹配模式可以以（<code>/</code>）开头防止递归。</li><li>匹配模式可以以（<code>/</code>）结尾指定目录。</li><li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（<code>!</code>）取反。</li></ul><p>所谓的 <code>glob</code> 模式是指 <code>shell</code> 所使用的简化了的正则表达式。 </p><ul><li><code>*</code>星号匹配零个或多个任意字符；</li><li><code>[abc]</code> 匹配任何一个方括号中的字符（要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；</li><li><code>?</code> 问号只匹配一个任意字符；</li><li><code>[0-9]</code> 如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 <code>[0-9]</code> 表示匹配所有 0 到 9 的数字）。 </li><li><code>**</code> 使用两个星号表示匹配任意中间目录，比如a/**/z 可以匹配 a/z, a/b/z 或 a/b/c/z等。</li></ul><p>下面我们看一个 <code>.gitignore</code> 文件的例子加深理解：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 忽略 .a 后缀的文件</span></span><br><span class="line">*.a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尽管上面忽略的 .a 后缀的文件，但是要追踪 lib.a 文件</span></span><br><span class="line">!lib.a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只忽略当前目录下的 TODO 文件，子目录下的 TODO 文件继续追踪</span></span><br><span class="line">/TODO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略 build/ 目录下的所有文件</span></span><br><span class="line">build/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略 doc 目录下的 .txt 文件，但是不忽略子目录下的 .txt 文件 如：忽略 doc/notes.txt, 但是不忽略 doc/server/arch.txt</span></span><br><span class="line">doc/*.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略 doc 目录下所有的 .pdf 文件，包括子目录下的 .pdf 文件</span></span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure></p><blockquote><p>GitHub 有一个十分详细的针对数十种项目及语言的 <code>.gitignore</code> 文件列表，你可以在 <a href="https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a> 找到它.</p></blockquote><h2 id="获取帮助"><a href="#获取帮助" class="headerlink" title="获取帮助"></a>获取帮助</h2><p>有三种方法可以找到 Git 命令的使用手册：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">help</span> &lt;verb&gt;</span><br><span class="line">git &lt;verb&gt; --<span class="built_in">help</span></span><br><span class="line">man git-&lt;verb&gt;</span><br></pre></td></tr></table></figure></p><p>例如，要想获得 config 命令的手册，执行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">help</span> config</span><br></pre></td></tr></table></figure></p><h2 id="获取-Git-仓库"><a href="#获取-Git-仓库" class="headerlink" title="获取 Git 仓库"></a>获取 Git 仓库</h2><ul><li>在现有目录中初始化仓库</li></ul><p>使用 <code>git init</code> 初始化，创建一个新的Git仓库</p><p>在你的工作目录下创建一个名为 <code>learngit</code> 的目录，并切换到该目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir learngit</span><br><span class="line"><span class="built_in">cd</span> learngit</span><br></pre></td></tr></table></figure><p>执行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></p><p>到这一步初始化的工作就完成了</p><ul><li>克隆现有的仓库</li></ul><p>克隆仓库的命令格式是 <code>git clone [url]</code> 。 比如，要克隆 Git 的可链接库 libgit2，可以用下面的命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/libgit2/libgit2</span><br></pre></td></tr></table></figure></p><p>这会在当前目录下创建一个名为 “libgit2” 的目录，并在这个目录下初始化一个 .git 文件夹，从远程仓库拉取下所有数据放入 .git 文件夹，然后从中读取最新版本的文件的拷贝。 如果你进入到这个新建的 libgit2 文件夹，你会发现所有的项目文件已经在里面了，准备就绪等待后续的开发和使用。 如果你想在克隆远程仓库的时候，自定义本地仓库的名字，你可以使用如下命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/libgit2/libgit2 mylibgit</span><br></pre></td></tr></table></figure></p><p>这将执行与上一个命令相同的操作，不过在本地创建的仓库名字变为 mylibgit。</p><p>Git 支持多种数据传输协议。 上面的例子使用的是 <code>https://</code> 协议，不过你也可以使用 <code>git://</code> 协议或者使用 <code>SSH</code>传输协议，比如 <code>user@server:path/to/repo.git</code> 。</p><h1 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h1><p>在工作目录中新建一个文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano readme.txt</span><br></pre></td></tr></table></figure></p><p>添加一行文字<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This is demo for git learning</span><br></pre></td></tr></table></figure></p><h2 id="检查状态"><a href="#检查状态" class="headerlink" title="检查状态"></a>检查状态</h2><p>使用 <code>git status</code> 检查工作区和暂存区的内容（文件状态）</p><p>现在工作目录有一个新的文件 <code>readme.txt</code> 但是还没有提交到暂存区</p><p>执行 <code>git status</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">Initial commit</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line"></span><br><span class="line">        readme.txt</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">"git add"</span> to track)</span><br></pre></td></tr></table></figure><p>从上面终端中打印的信息可以注意到<code>Untracked files:</code>下面的<code>readme.txt</code>,<code>Untracked</code> （未跟踪）表示Git已经看到这个文件，但是还没有开始跟踪这个文件的变化。 </p><p><code>git status</code> 命令的输出十分详细，但其用语有些繁琐。 如果你使用 <code>git status -s</code> 命令或 <code>git status --short</code> 命令，你将得到一种更为紧凑的格式输出。 </p><p>运行 <code>git status -s</code> ，状态报告输出如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status -s</span><br><span class="line"> M README</span><br><span class="line">MM Rakefile</span><br><span class="line">A  lib/git.rb</span><br><span class="line">M  lib/simplegit.rb</span><br><span class="line">?? LICENSE.txt</span><br></pre></td></tr></table></figure></p><p><code>??</code> 新添加的未跟踪文件<br><code>A</code> 新添加到暂存区中的文件，<br><code>M</code> 修改过的文件 </p><blockquote><p><code>M</code> 有两个可以出现的位置，出现在右边的 <code>M</code> 表示该文件被修改了但是还没放入暂存区，出现在靠左边的 <code>M</code> 表示该文件被修改了并放入了暂存区。 例如，上面的状态报告显示： <code>README</code> 文件在工作区被修改了但是还没有将修改后的文件放入暂存区,<code>lib/simplegit.rb</code> 文件被修改了并将修改后的文件放入了暂存区。 而 <code>Rakefile</code> 在工作区被修改并提交到暂存区后又在工作区中被修改了，所以在暂存区和工作区都有该文件被修改了的记录。</p></blockquote><h2 id="跟踪新文件"><a href="#跟踪新文件" class="headerlink" title="跟踪新文件"></a>跟踪新文件</h2><p>使用命令 <code>git add</code> 开始跟踪一个文件。<br>执行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add readme.txt</span><br></pre></td></tr></table></figure></p><p>我们再来查看状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">Initial commit</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage)</span><br><span class="line"></span><br><span class="line">        new file:   readme.txt</span><br></pre></td></tr></table></figure><p>从<code>new file:   readme.txt</code> 可以看出 <code>readme.txt</code> 已经加入暂存区了，现在文件已处于 <code>tracked</code> （已跟踪）状态，从现在开始Git将跟踪它的每一次改动。</p><ul><li><code>git diff</code> 比较工作区和暂存区的差异</li></ul><h2 id="暂存已修改文件"><a href="#暂存已修改文件" class="headerlink" title="暂存已修改文件"></a>暂存已修改文件</h2><p>在 <code>readme.txt</code> 文件中加入另外一行文字<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">This is another line</span><br></pre></td></tr></table></figure></p><p>执行<code>git diff</code>命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff</span><br><span class="line">diff --git a/readme.txt b/readme.txt</span><br><span class="line">index b35e311..60520a0 100644</span><br><span class="line">--- a/readme.txt</span><br><span class="line">+++ b/readme.txt</span><br><span class="line">@@ -1 +1,2 @@</span><br><span class="line">-This is demo <span class="keyword">for</span> git learning</span><br><span class="line">\ No newline at end of file</span><br><span class="line">+This is demo <span class="keyword">for</span> git learning</span><br><span class="line">+This is another line</span><br><span class="line">\ No newline at end of file</span><br></pre></td></tr></table></figure><p>使用 <code>git diff</code> 命令可以检查文件在工作目录和暂存区中的差别。<br>从打印信息可以看出，工作目录中 <code>readme.txt</code> 的内容（ <code>+</code> 标记）比暂存区（ <code>-</code> 标记）的内容多出了我们刚添加的一行。</p><blockquote><p>PS: 按键盘上的 <code>q</code> 可以退出 diff 模式</p></blockquote><p>现在我们来修改这个已被跟踪的文件<br>执行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add readme.txt</span><br></pre></td></tr></table></figure></p><p>要暂存这次更新，需要运行 git add 命令。 这是个多功能命令：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。</p><h2 id="提交更新"><a href="#提交更新" class="headerlink" title="提交更新"></a>提交更新</h2><p> <code>git commit</code> 把暂存区文件的改动提交到仓库</p><p><code>commit</code> 是这里说的Git工作流程的最后一步，该命令会把已跟踪的文件的改动永久的保存到仓库。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">"Complete my first commit"</span></span><br></pre></td></tr></table></figure><p>需要注意的是 <code>commit</code> 需要配合 <code>-m</code>选项一起使用来备注每一次提交。通常我们会约定备注信息要满足下列几个条件</p><ul><li>必须用引号引起来</li><li>用现代时书写备注</li><li>简明扼要（不超过50个字符）</li></ul><p>尽管使用暂存区域的方式可以精心准备要提交的细节，但有时候这么做略显繁琐。 Git 提供了一个跳过使用暂存区域的方式， 只要在提交的时候，给 <code>git commit</code> 加上 <code>-a</code> 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 <code>git add</code> 步骤：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -a -m <span class="string">'added new benchmarks'</span></span><br></pre></td></tr></table></figure></p><p>有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 <code>--amend</code> 选项的提交命令尝试重新提交：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure></p><p>这个命令会将暂存区中的文件提交。 如果自上次提交以来你还未做任何修改（例如，在上次提交后马上执行了此命令），那么快照会保持不变，而你所修改的只是提交信息。</p><p>执行上面命令会启动编辑器打开你上一次提交的备注信息，编辑后保存会覆盖原来的提交信息。</p><p>例如，你提交后发现忘记了暂存某些需要的修改，可以像下面这样操作：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">'initial commit'</span></span><br><span class="line">git add forgotten_file</span><br><span class="line">git commit --amend</span><br></pre></td></tr></table></figure></p><p>最终你只会有一个提交 - 第二次提交将代替上一次提交的结果。</p><h2 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h2><ul><li><code>git log</code> 列出所有的提交历时</li></ul><p>执行 <code>git log</code> 命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br><span class="line">commit 12385fd24ad0cadb2ca6ed4488caae153e3d23b9</span><br><span class="line">Author: winter &lt;summerandwiner@gmail.com&gt;</span><br><span class="line">Date:   Fri Dec 9 02:55:43 2016 -0500  </span><br><span class="line"></span><br><span class="line">Complete first line of commit</span><br></pre></td></tr></table></figure><p>从终端打印的文本我们可以看到下面的信息：</p><ul><li>一段40个字符的字符串（12385fd24ad0cadb2ca6ed4488caae153e3d23b9），我们把它称之为 <code>SHA</code>, Git用它来标识每一次提交的唯一性。</li><li>提交的用户</li><li>提交的日期和时间</li><li>提交的备注信息</li></ul><h2 id="移除文件"><a href="#移除文件" class="headerlink" title="移除文件"></a>移除文件</h2><p>要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。 可以用 <code>git rm</code> 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。</p><p>如果只是简单地从工作目录中手工删除文件，运行 <code>git status</code> 时就会在 “Changes not staged for commit” 部分（也就是 未暂存清单）看到：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rm PROJECTS.md</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with <span class="string">'origin/master'</span>.</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">"git add/rm &lt;file&gt;..."</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">        deleted:    PROJECTS.md</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span><br></pre></td></tr></table></figure></p><p>然后再运行 <code>git rm</code> 记录此次移除文件的操作：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rm PROJECTS.md</span><br><span class="line">rm <span class="string">'PROJECTS.md'</span></span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</span><br><span class="line"></span><br><span class="line">    deleted:    PROJECTS.md</span><br></pre></td></tr></table></figure></p><p>下一次提交时，该文件就不再纳入版本管理了。 如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 <code>-f</code>（译注：即 force 的首字母）。 这是一种安全特性，用于防止误删还没有添加到快照的数据，这样的数据不能被 Git 恢复。</p><p>另外一种情况是，我们想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。 换句话说，你想让文件保留在磁盘，但是并不想让 <code>Git</code> 继续跟踪。 当你忘记添加 <code>.gitignore</code>文件，不小心把一个很大的日志文件或一堆 <code>.a</code> 这样的编译生成文件添加到暂存区时，这一做法尤其有用。 为达到这一目的，使用 <code>--cached</code> 选项：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm --cached README</span><br></pre></td></tr></table></figure></p><p><code>git rm</code> 命令后面可以列出文件或者目录的名字，也可以使用 <code>glob</code> 模式。 比方说：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm <span class="built_in">log</span>/\*.<span class="built_in">log</span></span><br></pre></td></tr></table></figure></p><p>注意到星号 <code>*</code> 之前的反斜杠 <code>\</code>， 因为 <code>Git</code>有它自己的文件模式扩展匹配方式，所以我们不用 <code>shell</code> 来帮忙展开。 此命令删除 log/ 目录下扩展名为 <code>.log</code> 的所有文件。 类似的比如：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm \*~</span><br></pre></td></tr></table></figure></p><p>该命令为删除以 <code>~</code> 结尾的所有文件。</p><h2 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h2><p>不像其它的 VCS 系统，Git 并不显式跟踪文件移动操作。 如果在 Git 中重命名了某个文件，仓库中存储的元数据并不会体现出这是一次改名操作。 不过 Git 非常聪明，它会推断出究竟发生了什么，至于具体是如何做到的，我们稍后再谈。</p><p>既然如此，当你看到 Git 的 <code>mv</code> 命令时一定会困惑不已。 要在 Git 中对文件改名，可以这么做：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git mv file_from file_to</span><br></pre></td></tr></table></figure></p><p>它会恰如预期般正常工作。 实际上，即便此时查看状态信息，也会明白无误地看到关于重命名操作的说明：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git mv README.md README</span><br><span class="line">git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</span><br><span class="line"></span><br><span class="line">    renamed:    README.md -&gt; README</span><br></pre></td></tr></table></figure></p><p>其实，运行 <code>git mv</code> 就相当于运行了下面三条命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv README.md README</span><br><span class="line">git rm README.md</span><br><span class="line">git add README</span><br></pre></td></tr></table></figure></p><p>如此分开操作，Git 也会意识到这是一次改名，所以不管何种方式结果都一样。 两者唯一的区别是，<code>mv</code> 是一条命令而另一种方式需要三条命令，直接用 <code>git mv</code> 轻便得多。 不过有时候用其他工具批处理改名的话，要记得在提交前删除老的文件名，再添加新的文件名。</p><h1 id="追踪"><a href="#追踪" class="headerlink" title="追踪"></a>追踪</h1><p>在使用Git时，我们经常会遇到一些情况需要撤销我们所做的一些修改，Git提供了一些这样的特性。<br>首先我们需要了解一个概念，Git把 <code>HEAD</code> 提交作为我们正在进行的提交，大部分情况下最新的提交就是 <code>HEAD</code> 提交。<br>使用下面的命令查看 <code>HEAD</code> 提交<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git show HEAD</span><br></pre></td></tr></table></figure></p><h2 id="撤销对文件的修改"><a href="#撤销对文件的修改" class="headerlink" title="撤销对文件的修改"></a>撤销对文件的修改</h2><p>假设我们对工作目录中的 <code>readme.txt</code> 做了一些改动，但是现在我们想要放弃这些改动恢复到改动之前的样子，但是我们已经忘记了改动之前是什么样子了，下面的命令可以使工作目录中的 <code>readme.txt</code> 文件恢复到你最近一次提交时的样子</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout HEAD readme.txt</span><br><span class="line">git checkout -- readme.txt</span><br></pre></td></tr></table></figure><p>上面两个命令可以达到相同的效果。</p><p><strong>IMPORTANT</strong><br><code>git checkout -- [file]</code> <strong>是一个危险的命令</strong>，执行命令后我们对那个文件做的任何修改都会消失，且<strong>不可恢复</strong>，因为Git只是拷贝仓库中最后一次提交的文件来覆盖它。 除非你确实清楚不想要那个文件了，否则不要使用这个命令。</p><blockquote><p>记住，在 Git 中任何 已提交的 东西几乎总是可以恢复的。 甚至那些被删除的分支中的提交或使用 <code>--amend</code>选项覆盖的提交也可以恢复。 然而，任何你未提交的东西丢失后很可能再也找不到了。</p></blockquote><h2 id="取消暂存的文件"><a href="#取消暂存的文件" class="headerlink" title="取消暂存的文件"></a>取消暂存的文件</h2><p>假设一种情况，我们不小心把上面对 <code>readme.txt</code> 的改动添加到了暂存区，但是现在我们现在还不想提交这个改动。Git 中可以通过 <code>git reset</code> 命令把某个文件在暂存区中移除。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset HEAD readme.txt</span><br></pre></td></tr></table></figure><p>上面的命令实际上是把暂存区的 <code>readme.txt</code> 文件重置到与 <code>HEAD</code> 提交中的相同来达到从暂存区移除的效果，假如我们对 <code>readme.txt</code> 文件做了两个改动，并分两次添加到暂存区，执行命令后，这两次的提交都会在暂存区消失。<br>它只会重置暂存区的文件，不会影响工作目录中的文件。<br>类似的，如果我们想要把暂存区的 <code>readme.txt</code> 文件重置到其他版本的提交也可以通过 <code>git reset SHA</code> 来实现。这个命令是用之前任意一次提交的 <code>SHA</code> 前7位来定位，如：我们第一次提交的 <code>SHA</code> 为 <code>12385fd24ad0cadb2ca6ed4488caae153e3d23b9</code> 那么我们使用的命令为：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset 12385fd readme.txt</span><br></pre></td></tr></table></figure></p><p>为了更好的理解 <code>git reset commit_SHA</code> 我们来看一下下面的图表，每一个圆点代表一次提交。<br><img src="//cdn.jsdelivr.net/gh/summerandwinter/summerandwinter.github.io/assets/images/articles/git-diagram-3.svg" alt="Git HEAD切换"><br>Before reset:</p><ul><li>HEAD 是最近一次提交</li></ul><p>After resetting:</p><ul><li>HEAD 变成了你选择的之前的一次提交</li><li>灰色的提交不再是你项目的一部分</li><li>从本质上改变了项目的历史</li></ul><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><p><code>git branch</code> 检查当前所在的分支</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch</span><br><span class="line">* maseter</span><br></pre></td></tr></table></figure><p><code>*</code> 标记当前所在分支</p><p>为了更好的理解Git分支我们看下下面的图表</p><p><img src="//cdn.jsdelivr.net/gh/summerandwinter/summerandwinter.github.ioassets/images/articles/git-diagram-1.svg" alt="Git分支"></p><ul><li>图中的圆点代表提交，所有的提交组成了Git项目的提交历史</li><li>新的分支是不同版本的Git项目，它包含Master的提交，也包含Master所没有的提交</li></ul><p>到目前为止，我们所有的操作都是在单个分支 <code>master</code> 上进行的。<br>下面我们新建一个分支</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch new_branch</span><br></pre></td></tr></table></figure><p>这里 <code>new_branch</code> 是新分支的名称，名称尽量简短且表明分支的作用，名称中不能含空格。  </p><p>现在我们成功的创建了一个新的分支，现在新分支包含了master分支的所有提交历史，接下来我们把当前分支切换到新建的分支<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout new_branch</span><br></pre></td></tr></table></figure></p><p>分支切换成功后接下来所有的提交都会提交到新分支 <code>new_branch</code> 而 <code>master</code> 分支不受影响。</p><p>当我们在 <code>new_branch</code> 分支上提交了一些修改后，希望把新分支上的提交同步到 <code>master</code> 中可以通过合并来完成</p><p>首先把当前分支切换到 <code>master</code><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure></p><p>把新分支合并到 <code>master</code> 分支<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge new_branch</span><br></pre></td></tr></table></figure></p><p>当我们使用分支时常常会出现一个问题，我们在两个分支上都做了一些修改，而且这些修改在同一个地方，这种情况下进行合并时，Git无法帮我们决定保留哪个修改，于是Git以冲突的形成告诉我们两个版本的修改中我们重复修改了哪些地方，让我们自己来决定该保留哪个版本的修改。<br>在发生冲突的文件中Git用一些特殊的标记来标识<code>HEAD</code>(master)版本的内容和<code>new_branch</code> 版本的内容,类似下面的方式：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">master version of line</span><br><span class="line">=======</span><br><span class="line">new_branch version of line</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; new_branch</span><br></pre></td></tr></table></figure></p><p>选择好需要保留的版本，删除不需要的版本，需要注意的是那些特殊标记如：<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> 和 <code>=======</code> 也要删除，不然冲突依然存在。</p><p>通常情况下新建分支的目的是完成项目的一个新特性，当这些特性完成后这个分支的作用也就达到了，当我们把这个分支合并当 <code>master</code> 后，这个分支就可以删除了。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d new_branch</span><br></pre></td></tr></table></figure></p><p>上面的命令实现对 <code>new_branch</code> 分支的删除</p><h1 id="团队协作"><a href="#团队协作" class="headerlink" title="团队协作"></a>团队协作</h1><ul><li><code>git clone</code> 从远程仓库拷贝项目到本地</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> remote_location clone_name</span><br></pre></td></tr></table></figure><ul><li><code>remote_location</code> 告诉Git哪里可以找到远程仓库，通常是一个网址，也可以是一个路径</li><li><p><code>clone_name</code> 告诉Git本地仓库放哪里</p></li><li><p><code>git remote -v</code> 列出Git项目的远程仓库</p></li><li><p><code>git fetch</code> 从远程仓库获取到本地拷贝<br>这个命令不会把远程仓库的修改合并到本地仓库，它会把远程的修改同步到远程分支（remote branch）,此时远程修改还只同步到了（origin/master),本地的master分支还没有更新。</p></li><li><p><code>git merge origin/master</code> 合并 <code>origin/master</code>到本地分支</p></li><li><code>git push</code> 提交本地分支到远程仓库</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin your_branch_name</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      介绍一些Git学习过程中入门的基本知识
    
    </summary>
    
      <category term="Git" scheme="https://summerandwinter.github.io/category/Git/"/>
    
    
      <category term="Git" scheme="https://summerandwinter.github.io/tag/Git/"/>
    
  </entry>
  
  <entry>
    <title>学习Mac命令行</title>
    <link href="https://summerandwinter.github.io/learn-the-command-line.html"/>
    <id>https://summerandwinter.github.io/learn-the-command-line.html</id>
    <published>2016-12-10T11:23:55.000Z</published>
    <updated>2019-11-28T08:58:49.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件系统导航"><a href="#文件系统导航" class="headerlink" title="文件系统导航"></a>文件系统导航</h1><ul><li><code>ls</code> 列出当前工作目录下所有的文件和文件夹</li><li><code>ls -a</code> 列出所有文件，包括隐藏的文件和文件夹</li><li><code>ls -l</code> 列出完整信息（long format）</li><li><code>ls -t</code> 根据最后修改时间排序</li><li><code>pwd</code> 打印当前工作目录(print working directory)</li><li><code>cd</code> 切换当前目录(change directory)</li><li><code>cd ..</code> 返回上一级目录</li></ul><h1 id="文件系统操作"><a href="#文件系统操作" class="headerlink" title="文件系统操作"></a>文件系统操作</h1><ul><li><code>mkdir</code>代表创建目录(make directory)</li><li><code>touch</code> 创建文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch file.txt</span><br></pre></td></tr></table></figure><ul><li><code>cp</code> 拷贝文件或文件夹</li></ul><p>拷贝文件到文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp source.txt target.txt</span><br></pre></td></tr></table></figure></p><p>拷贝文件到文件夹<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp <span class="built_in">source</span>/file.txt target/</span><br></pre></td></tr></table></figure></p><p>拷贝多个文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp <span class="built_in">source</span>/file.txt <span class="built_in">source</span>/file2.txt target/</span><br></pre></td></tr></table></figure></p><p>拷贝所有文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp * target/</span><br></pre></td></tr></table></figure></p><p>拷贝以所有m开头的.txt文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp m*.txt target/</span><br></pre></td></tr></table></figure></p><ul><li><code>mv</code> 移动文件或文件夹</li></ul><p>移动文件到文件夹<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv file.txt target/</span><br></pre></td></tr></table></figure></p><p>移动多个文件到文件夹<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv file1.txt file2.txt target/</span><br></pre></td></tr></table></figure></p><p>移动文件到文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv source.txt target.txt</span><br></pre></td></tr></table></figure></p><ul><li><code>rm</code> 删除文件</li></ul><p>删除单个文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm file.txt</span><br></pre></td></tr></table></figure></p><ul><li><code>rm -r</code> 删除文件夹</li></ul><p><code>r</code> 表示迭代（recursive）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -r directory</span><br></pre></td></tr></table></figure><blockquote><p><code>rm</code>会把文件和文件夹彻底删除，系统没有没有恢复文件的命令，请谨慎使用该命令。</p></blockquote><h1 id="输入输出重定向"><a href="#输入输出重定向" class="headerlink" title="输入输出重定向"></a>输入输出重定向</h1><p>标准输入（standard input），缩写形式为<code>stdin</code>，是指通过键盘或其他输入设备输入到终端的信息。<br>标准输出（standard output），缩写形式为<code>stdout</code>，是指程序运行后输出的信息。<br>标准错误（standard error），缩写形式为<code>stderr</code>，是指程序运行失败时输出的错误信息。</p><ul><li><code>&gt;</code> 重定向标准输出到文件（覆盖）</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"Hello"</span></span><br></pre></td></tr></table></figure><p><code>echo</code>命令接收字符串”Hello”作为标准输入，把接收到的字符串作为标准输出打印到终端。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"Hello"</span> &gt; hello.txt</span><br></pre></td></tr></table></figure></p><p><code>&gt;</code>把<code>echo</code>命令本应打印到终端的输出重定向到hello.txt文件</p><p>执行下面的命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat hello.txt</span><br></pre></td></tr></table></figure></p><p><code>cat</code> 把文件的内容输出到终端<br>可以看到已经把字符串”Hello”输出到hello.txt文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat source.txt &gt; target.txt</span><br></pre></td></tr></table></figure><p><code>&gt;</code>把<code>cat</code>命令本应打印到终端的输出重定向到 target.txt 文件</p><ul><li><code>&gt;&gt;</code> 重定向标准输出到文件（追加）</li></ul><p><code>&gt;&gt;</code>命令的用法与<code>&gt;</code>相同，区别在于<code>&gt;</code>会覆盖原有的内容，而<code>&gt;&gt;</code>是在原有内容的末尾追加内容</p><ul><li><code>&lt;</code> 重定向标准输入到命令</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt; file.txt</span><br></pre></td></tr></table></figure><p><code>&lt;</code> 把右边的文件作为标准输入输入给左边的程序。这里<code>lakes.txt</code> 作为 <code>cat</code>命令的标准输入。</p><ul><li><code>|</code> 重定向标准输出到命令</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat volcanoes.txt | wc</span><br></pre></td></tr></table></figure><p>可以把 <code>|</code> 理解为一个管道，把左边命令的标准输出作为右边命令的标准输入传递给右边的命令，可以理解为命令都命令的重定向。这里<code>cat volcanoes.txt</code>的标准输出是<code>wc</code>的标准输入<br><code>wc</code> 命令的作用是分别列出内容种的行数，字数和字符数</p><p>多个<code>|</code>和<code>&gt;</code>可以组合使用<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat file1.txt | wc | cat &gt; file2.txt</span><br></pre></td></tr></table></figure></p><p>这里 <code>cat file1.txt</code> 的标准输出通过管道传递给 <code>wc</code> 命令, <code>wc</code> 的标准输出传递给 <code>cat</code> ,最后 <code>cat</code> 的标准输出重定向到 <code>file2.txt</code></p><ul><li><code>sort</code> 按每行的字母排序</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sort file.txt</span><br></pre></td></tr></table></figure><p><code>sort</code> 接收标准输入并为标准输出按字母排序</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat file.txt | sort &gt; sorted-file.txt</span><br></pre></td></tr></table></figure><p>从 <code>file.txt</code> 中接收标准输入通过管道传递到 <code>sort</code> ，重定向 <code>sort</code> 的标准输出到 <code>sorted-file.txt</code>文件</p><ul><li><code>uniq</code> 过滤相邻的重复行</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uniq file.txt</span><br></pre></td></tr></table></figure><p><code>uniq</code> 代表 “unique”，过滤文件中相邻的重复行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sort file.txt | uniq</span><br></pre></td></tr></table></figure></p><p>由于 <code>uniq</code> 只过滤相邻的重复行，要实现过来所有的重复行可以先用 <code>sort</code> 命令按字母排序。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sort file.txt | uniq &gt; uniq-file.txt</span><br></pre></td></tr></table></figure></p><p>上面的命令实现过滤 <code>file.txt</code> 文件中所有的重复行，并输出到 <code>uniq-file.txt</code> 文件。</p><ul><li><code>grep</code> 根据表达式搜索文本</li></ul><p><code>grep</code> 是global regular expression print的首字母缩写，搜索文件中与表达式匹配的行，并返回结果。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep Keyword file.txt</span><br></pre></td></tr></table></figure></p><p>这里搜索file.txt文件中包含’Keyword’关键字的行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -i Keyword file.txt</span><br></pre></td></tr></table></figure></p><p><code>grep -i</code> 允许搜索时大小写不敏感，默认是大小写敏感的。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -R Keyword /home/cuser/workspace/commandline</span><br></pre></td></tr></table></figure></p><p><code>grep -R</code> 搜索目录下所有文件，输出包含匹配关键字的文件的文件名和匹配的行，<code>-R</code>代表迭代（recursive）。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -Rl Keyword /home/cuser/workspace/commandline</span><br></pre></td></tr></table></figure></p><p><code>grep -Rl</code> 搜索目录下所有文件，只输出包含匹配关键字的文件的文件名</p><ul><li><code>sed</code> 根据表达式搜索修改文本并输出</li></ul><p><code>sed</code> 代表 “stream editor”，接收标准输入并在显示前根据表达式修改内容，类似于我们熟知的“查找替换”。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed <span class="string">'s/wordtofind/replacement/'</span> file.txt</span><br></pre></td></tr></table></figure></p><ul><li><code>s</code>: 代表 “substitution”。使用 <code>sed</code> 命令的必选参数。</li><li><code>wordtofind</code>: 需要被替换的字符串</li><li><code>replacement</code>: 用来替换的字符串</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed <span class="string">'s/wordtofind/replacement/g'</span> file.txt</span><br></pre></td></tr></table></figure><p>上面的命令用到了<code>g</code>表达式，代表”global”,文件种所有的wordtofind都会被替换成replacement。</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>命令行会自动识别home目录下的<code>.bash_profile</code>文件作为bash描述文件</p><p>在终端种执行下面的命令编辑描述文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano ~/.bash_profile</span><br></pre></td></tr></table></figure></p><p>下面解释下每个命令的作用：</p><ul><li><code>nano</code> 用nano编辑器编辑文件</li><li><code>~</code> 表示home目录</li><li><code>.</code> 表示隐藏的文件</li><li><code>~/.bash_profile</code> 代表命令行的描述文件</li></ul><p>在<code>~/.bash_profile</code>文件中加入下面的代码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"Welcome, Winter"</span></span><br><span class="line"><span class="built_in">alias</span> pd=<span class="string">"pwd"</span></span><br><span class="line"><span class="built_in">export</span> USER=<span class="string">"Winter"</span></span><br><span class="line"><span class="built_in">export</span> PS1=<span class="string">"&gt;&gt;"</span></span><br></pre></td></tr></table></figure><p>然后执行下面的命令使修改在当前会话中立即生效<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></p><p>下面是对代码的解释</p><ul><li><code>echo</code>　在终端输出文字</li><li><code>alias</code> 设置命令的别名，这里用<code>pd</code>作为<code>pwd</code>的别名，修改生效后输入<code>pd</code>能达到跟<code>pwd</code>命令相同的效果</li><li><code>export</code>　使设置的变量在当前会话发起的子会话中可访问</li></ul><p>可以用<code>env</code>命令查看当前会话的环境变量<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">env</span><br></pre></td></tr></table></figure></p><p>查看名称或值中含<code>PATH</code>的环境变量<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">env | grep PATH</span><br></pre></td></tr></table></figure></p><p>下面是一些常用的环境变量</p><ul><li><code>USER</code> 当前用户的用户名</li><li><code>PS1</code> 命令提示符</li><li><code>HOME</code> home目录，通常情况下无需自定义</li><li><code>PATH</code> 可执行脚本的存放路径，多个路径以冒号隔开，</li></ul>]]></content>
    
    <summary type="html">
    
      介绍一些Mac命令行学习过程中入门的基本知识
    
    </summary>
    
      <category term="命令行" scheme="https://summerandwinter.github.io/category/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
    
      <category term="cmd" scheme="https://summerandwinter.github.io/tag/cmd/"/>
    
  </entry>
  
  <entry>
    <title>Hexo优化方案 搜索引擎优化</title>
    <link href="https://summerandwinter.github.io/hexo-optimize-seo.html"/>
    <id>https://summerandwinter.github.io/hexo-optimize-seo.html</id>
    <published>2016-11-25T11:25:46.000Z</published>
    <updated>2019-11-28T08:58:49.415Z</updated>
    
    <content type="html"><![CDATA[<p>前面介绍了优化博客本身的页面优化（压缩页面减少请求大小），这里介绍下博客的SEO(搜索引擎优化)。<br><a id="more"></a></p><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><p>找到主题模板文件的head部分,在<code>title</code>标签中加上自定义的关键字。</p><p>我的在<code>post/head.ejs</code>目录</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;title&gt;&lt;% if (title)&#123; %&gt;&lt;%= title %&gt; | &lt;% &#125; %&gt;&lt;%= config.title %&gt;&lt;/title&gt;</span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;title&gt;&lt;% if (title)&#123; %&gt;&lt;%= title %&gt; | &lt;% &#125; %&gt;&lt;%= config.title %&gt; &lt;% if (theme.description)&#123; %&gt;-&lt;%= theme.description %&gt; &lt;% &#125; %&gt; &lt;/title&gt;</span><br></pre></td></tr></table></figure><p>然后在主题配置文件<code>_config.yml</code>中加入<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">description:</span> <span class="string">"你的关键词"</span></span><br></pre></td></tr></table></figure></p><h1 id="外部链接"><a href="#外部链接" class="headerlink" title="外部链接"></a>外部链接</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>nofollow是HTML元标签(meta)的content属性和链接标签(a)的rel属性的一个值，告诉机器(爬虫)无需追踪目标页，为了对抗blogspam(博客垃圾留言信息)，Google推荐使用nofollow，告诉搜索引擎爬虫无需抓取目标页，同时告诉搜索引擎无需将的当前页的Pagerank传递到目标页。但是如果你是通过sitemap直接提交该页面，爬虫还是会爬取，这里的nofollow只是当前页对目标页的一种态度，并不代表其他页对目标页的态度。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>1.防止不可信的内容，最常见的是博客上的垃圾留言与评论中为了获取外链的垃圾链接，为了防止页面指向一些拉圾页面和站点。<br>2.付费链接：为了防止付费链接影响Google的搜索结果排名，Google建议使用nofollow属性。<br>3.引导爬虫抓取有效的页面：避免爬虫抓取一些无意义的页面，影响爬虫抓取的效率。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li>给所有外部链接加上<code>rel=&quot;external nofollow&quot;</code>属性</li><li>外部链接target=”_blank”在新窗口种打开外部链接</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p><strong>安装插件</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-autonofollow --save</span><br></pre></td></tr></table></figure></p><p><strong>配置</strong><br>编辑站点目录下的<code>_config.yml</code>，添加<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">nofollow:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sanyecao.me</span></span><br></pre></td></tr></table></figure></p><ul><li>enable - 开启插件，默认为false</li><li>exclude - 豁免域名（不加nofollow标签的域名）</li></ul><h1 id="标准链接"><a href="#标准链接" class="headerlink" title="标准链接"></a>标准链接</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>canonical 是 Google、雅虎、微软等搜索引擎一起推出的一个标签，它的主要作用是用来解决由于网址形式不同内容相同而造成的内容重复问题。这个标签对搜索引擎作用非常大，简单的说它可以让搜索引擎只抓取你想要强调的内容。</p><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><p>在主题目录种找到关于head的模板在<code>&lt;head&gt;</code>之间加入<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;% </span><br><span class="line">   var base_url = config.url;</span><br><span class="line">   if (config.url.charAt(config.url.length - 1) !== &apos;/&apos;) base_url += &apos;/&apos;;</span><br><span class="line">   var canonical_url = base_url + page.canonical_path.replace(&apos;index.html&apos;, &apos;&apos;);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;link rel=&quot;canonical&quot; href=&quot;&lt;%= canonical_url %&gt;&quot;&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>PS:这里给出的代码是ejs方式，其他方式需要修改表达式，有<a href="https://github.com/HyunSeob/hexo-auto-canonical" title="hexo-auto-canonical" target="_blank" rel="noopener">插件</a>的可以实现这个功能，但是个人觉得太麻烦，所以直接参考插件在主题里实现了。</p></blockquote><h1 id="网络爬虫"><a href="#网络爬虫" class="headerlink" title="网络爬虫"></a>网络爬虫</h1><p>robots.txt是一种存放于网站根目录下的ASCII编码的文本文件，它的作用是告诉搜索引擎此网站中哪些内容是可以被爬取的，哪些是禁止爬取的。robots.txt应该放在站点目录下的source文件中，网站生成后在网站的根目录(站点目录/public/)下。</p><p>我的robots.txt文件内容如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /archives/</span><br><span class="line">Allow: /categories/</span><br><span class="line">Allow: /about/</span><br><span class="line">Allow: /lab/</span><br><span class="line"></span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br></pre></td></tr></table></figure></p><h1 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h1><p>Sitemap即网站地图，它的作用在于便于搜索引擎更加智能地抓取网站。最简单和常见的sitemap形式，是XML文件，在其中列出网站中的网址以及关于每个网址的其他元数据（上次更新时间、更新的频率及相对其他网址重要程度等）。</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>编辑站点目录下的_config.yml，添加<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sitemap网站地图</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="comment"># baidu stimap</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure></p><p>在robots.txt文件中添加<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sitemap: https://summerandwinter.github.io/sitemap.xml</span><br><span class="line">Sitemap: https://summerandwinter.github.io/baidusitemap.xml</span><br></pre></td></tr></table></figure></p><h1 id="提交链接"><a href="#提交链接" class="headerlink" title="提交链接"></a>提交链接</h1><p>由于Github禁止百度爬虫访问博客，导致博客无法被百度收录。对于把Hexo部署在GitHub Pages上的用户来说，上面的sitemap和robots.txt都是无效的，只能通过主动提交链接的方式来实现。</p><p>首先，在Hexo根目录下，安装插件：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure></p><p>然后，同样在根目录下，把以下内容配置到_config.yml文件中:<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">3</span> <span class="comment">## 比如3，代表提交最新的三个链接</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">sanyecao.me</span> <span class="comment">## 在百度站长平台中注册的域名</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">your_token</span> <span class="comment">## 请注意这是您的秘钥， 请不要发布在公众仓库里!</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidu_urls.txt</span> <span class="comment">## 文本文档的地址， 新链接会保存在此文本文档里</span></span><br></pre></td></tr></table></figure></p><p>其次，记得查看_config.ym文件中url的值， 必须包含是百度站长平台注册的域名（一般有www）， 比如:<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://summerandwinter.github.io</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:title.html</span></span><br></pre></td></tr></table></figure></p><p>最后，加入新的deployer:<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">baidu_url_submitter</span></span><br></pre></td></tr></table></figure></p><p>执行hexo deploy的时候，新的连接就会被推送了。</p><p>实现原理</p><p>推送功能的实现，分为两部分：<br>新链接的产生， hexo generate 会产生一个文本文件，里面包含最新的链接<br>新链接的提交， hexo deploy 会从上述文件中读取链接，提交至百度搜索引擎<br>[参考链接][reference]<br>[reference]:  <a href="http://hui-wang.info/2016/10/23/Hexo%E6%8F%92%E4%BB%B6%E4%B9%8B%E7%99%BE%E5%BA%A6%E4%B8%BB%E5%8A%A8%E6%8F%90%E4%BA%A4%E9%93%BE%E6%8E%A5/" target="_blank" rel="noopener">http://hui-wang.info/2016/10/23/Hexo%E6%8F%92%E4%BB%B6%E4%B9%8B%E7%99%BE%E5%BA%A6%E4%B8%BB%E5%8A%A8%E6%8F%90%E4%BA%A4%E9%93%BE%E6%8E%A5/</a> “Hexo插件之百度主动提交链接”</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面介绍了优化博客本身的页面优化（压缩页面减少请求大小），这里介绍下博客的SEO(搜索引擎优化)。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://summerandwinter.github.io/category/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://summerandwinter.github.io/tag/Hexo/"/>
    
      <category term="Hexo优化" scheme="https://summerandwinter.github.io/tag/Hexo%E4%BC%98%E5%8C%96/"/>
    
      <category term="SEO" scheme="https://summerandwinter.github.io/tag/SEO/"/>
    
  </entry>
  
  <entry>
    <title>Hexo优化方案 Hexo插件静态资源压缩</title>
    <link href="https://summerandwinter.github.io/hexo-minify-two.html"/>
    <id>https://summerandwinter.github.io/hexo-minify-two.html</id>
    <published>2016-11-20T23:05:49.000Z</published>
    <updated>2019-11-28T08:58:49.415Z</updated>
    
    <content type="html"><![CDATA[<p>前面介绍了一种压缩hexo页面的方法，通过gulp配合它的插件来实现，我们还可以通过hexo插件（Hexo-all-minifier）来实现。<br>通过插件的方式会在<code>generate</code>时对html，css，js，图片等进行压缩，编译的时间会比较长，建议使用[gulp方式][gulp-minifier]实现。<br>[gulp-minifier]:   hexo-minify.html “Hexo优化方案 gulp插件静态资源压缩”<br><a id="more"></a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-all-minifier --save</span><br></pre></td></tr></table></figure><p>Mac用户还需要执行下面的命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install libtool automake autoconf nasm</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>在hexo的配置文件<code>_config.yml</code>中加入下面的配置参数：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">html_minifier:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br></pre></td></tr></table></figure><p>enable -开始插件，默认为true<br>exclude: 设置不需要压缩的文件</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">css_minifier:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">'*.min.css'</span></span><br></pre></td></tr></table></figure><p>enable -开始插件，默认为true<br>exclude: 设置不需要压缩的文件</p><pre><code class="yml"><span class="attr">js_minifier:</span>  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="attr">mangle:</span> <span class="literal">true</span>  <span class="attr">output:</span>  <span class="attr">compress:</span>  <span class="attr">exclude:</span>     <span class="bullet">-</span> <span class="string">'*.min.js</span></code></pre><p>enable -开始插件，默认为true<br>exclude: 设置不需要压缩的文件<br>mangle: 破坏文件名称<br>output: 输出选项<br>compress: 压缩选项<br>exclude: 设置不需要压缩的文件</p><pre><code class="yml"><span class="attr">image_minifier:</span>  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="attr">interlaced:</span> <span class="literal">false</span>  <span class="attr">multipass:</span> <span class="literal">false</span>  <span class="attr">optimizationLevel:</span> <span class="number">2</span>  <span class="attr">pngquant:</span> <span class="literal">false</span>  <span class="attr">progressive:</span> <span class="literal">false</span></code></pre><p>enable -开启插件，默认为true<br>interlaced - 默认为 false。<br>multipass - 多次优化svg图片直至其完全优化 默认 false。<br>optimizationLevel - 选择 0 到 7 的优化级别。 默认为 2。<br>pngquant - 开启 <code>imagemin-pngquant</code> 插件。 默认为 false。<br>progressive - 以低失真模式压缩。 默认为 false。</p><blockquote><p>实际测试用图片压缩报错，暂时关闭图片压缩功能。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面介绍了一种压缩hexo页面的方法，通过gulp配合它的插件来实现，我们还可以通过hexo插件（Hexo-all-minifier）来实现。&lt;br&gt;通过插件的方式会在&lt;code&gt;generate&lt;/code&gt;时对html，css，js，图片等进行压缩，编译的时间会比较长，建议使用[gulp方式][gulp-minifier]实现。&lt;br&gt;[gulp-minifier]:   hexo-minify.html “Hexo优化方案 gulp插件静态资源压缩”&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://summerandwinter.github.io/category/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://summerandwinter.github.io/tag/Hexo/"/>
    
      <category term="Hexo优化" scheme="https://summerandwinter.github.io/tag/Hexo%E4%BC%98%E5%8C%96/"/>
    
      <category term="Hexo压缩" scheme="https://summerandwinter.github.io/tag/Hexo%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>Hexo优化方案 gulp插件静态资源压缩</title>
    <link href="https://summerandwinter.github.io/hexo-minify.html"/>
    <id>https://summerandwinter.github.io/hexo-minify.html</id>
    <published>2016-11-20T19:52:19.000Z</published>
    <updated>2019-11-28T08:58:49.415Z</updated>
    
    <content type="html"><![CDATA[<p>通过压缩html,css,js等静态资源，可以减少请求的数据量从而达到优化hexo访问速度的目的，这里主要用到gulp和一些相关的插件来实现。<br><a id="more"></a><br>gulp是一个基于Node.js的自动化构建工具，我们可以通过一些gulp插件实现对html,css,js等静态资源的高效压缩。</p><h1 id="安装gulp"><a href="#安装gulp" class="headerlink" title="安装gulp"></a>安装gulp</h1><p>首先在hexo安装目录下安装<code>gulp</code>，假定hexo安装目录为 <code>Documents/hexo</code></p><p>输入下面的命令进入hexo安装目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Documents/hexo</span><br></pre></td></tr></table></figure><blockquote><p>PS:后面的操作都是在该目录下进行</p></blockquote><p>在hexo目录下安装<code>gulp</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install gulp -g</span><br></pre></td></tr></table></figure><h1 id="安装gulp插件"><a href="#安装gulp插件" class="headerlink" title="安装gulp插件"></a>安装gulp插件</h1><p>这里需要用到的插件有：</p><p><code>gulp-minify-css</code>  压缩css<br><code>gulp-uglify</code>      混淆js<br><code>gulp-htmlmin</code>     压缩html<br><code>gulp-htmlclean</code>   清理html<br><code>gulp-imagemin</code>    压缩图片</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install gulp-minify-css --save</span><br><span class="line">npm install gulp-uglify --save</span><br><span class="line">npm install gulp-htmlmin --save</span><br><span class="line">npm install gulp-htmlclean --save</span><br><span class="line">npm install gulp-imagemin --save</span><br></pre></td></tr></table></figure><h1 id="配置gulp"><a href="#配置gulp" class="headerlink" title="配置gulp"></a>配置gulp</h1><p>在hexo根目录添加<code>gulpfile.js</code>文件，文件内容如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var gulp = require(&apos;gulp&apos;);</span><br><span class="line">var minifycss = require(&apos;gulp-minify-css&apos;);</span><br><span class="line">var uglify = require(&apos;gulp-uglify&apos;);</span><br><span class="line">var htmlmin = require(&apos;gulp-htmlmin&apos;);</span><br><span class="line">var htmlclean = require(&apos;gulp-htmlclean&apos;);</span><br><span class="line">var imagemin = require(&apos;gulp-imagemin&apos;);</span><br><span class="line"></span><br><span class="line">// 压缩css文件</span><br><span class="line">gulp.task(&apos;minify-css&apos;, function() &#123;</span><br><span class="line">  return gulp.src(&apos;./public/**/*.css&apos;)</span><br><span class="line">  .pipe(minifycss())</span><br><span class="line">  .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩html文件</span><br><span class="line">gulp.task(&apos;minify-html&apos;, function() &#123;</span><br><span class="line">  return gulp.src(&apos;./public/**/*.html&apos;)</span><br><span class="line">  .pipe(htmlclean())</span><br><span class="line">  .pipe(htmlmin(&#123;</span><br><span class="line">    removeComments: true,</span><br><span class="line">    minifyJS: true,</span><br><span class="line">    minifyCSS: true,</span><br><span class="line">    minifyURLs: true,</span><br><span class="line">  &#125;))</span><br><span class="line">  .pipe(gulp.dest(&apos;./public&apos;))</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩js文件</span><br><span class="line">gulp.task(&apos;minify-js&apos;, function() &#123;</span><br><span class="line">  return gulp.src(&apos;./public/**/*.js&apos;)</span><br><span class="line">  .pipe(uglify())</span><br><span class="line">  .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩 public/demo 目录内图片</span><br><span class="line">gulp.task(&apos;minify-images&apos;, function() &#123;</span><br><span class="line">    gulp.src(&apos;./public/demo/**/*.*&apos;)</span><br><span class="line">        .pipe(imagemin(&#123;</span><br><span class="line">           optimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）</span><br><span class="line">           progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片</span><br><span class="line">           interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染</span><br><span class="line">           multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(&apos;./public/uploads&apos;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 默认任务</span><br><span class="line">gulp.task(&apos;default&apos;, [</span><br><span class="line">  &apos;minify-html&apos;,&apos;minify-css&apos;,&apos;minify-js&apos;,&apos;minify-images&apos;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>到这里对<code>gulp</code>的配置就完成了，只需要每次在执行generate命令后执行gulp就可以实现对静态资源的压缩，压缩完成后执行deploy命令同步到服务器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">gulp</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过压缩html,css,js等静态资源，可以减少请求的数据量从而达到优化hexo访问速度的目的，这里主要用到gulp和一些相关的插件来实现。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://summerandwinter.github.io/category/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://summerandwinter.github.io/tag/Hexo/"/>
    
      <category term="Hexo优化" scheme="https://summerandwinter.github.io/tag/Hexo%E4%BC%98%E5%8C%96/"/>
    
      <category term="Hexo压缩" scheme="https://summerandwinter.github.io/tag/Hexo%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>添加一个新的SSH key到GitHub账号</title>
    <link href="https://summerandwinter.github.io/adding-ssh-key-to-github-account.html"/>
    <id>https://summerandwinter.github.io/adding-ssh-key-to-github-account.html</id>
    <published>2016-11-20T09:23:06.000Z</published>
    <updated>2019-11-28T08:58:49.415Z</updated>
    
    <content type="html"><![CDATA[<p>在使用Git的过程中我们常常要与中央仓库进行同步，Git提供两种同步方式https和ssh方式。两种方式各有优劣，https方式使用简单，但是每次都需要输入密码，而且速度会比较慢，所以我们更多的是使用ssh方式同步，这种方式安全性更好，不需要每次都输入密码，更重要的是比https方式速度要快，GitHub在国内的访问不稳定的国情下这点尤为重要，下面介绍了通过ssh方式同步需要做的一些前期工作。<br><a id="more"></a></p><h1 id="检查是否存在SSH-keys"><a href="#检查是否存在SSH-keys" class="headerlink" title="检查是否存在SSH keys"></a>检查是否存在SSH keys</h1><p>生产SSH key之前先检查是否存在SSH keys<br>打开终端输入<code>ls -al ~/.ssh</code>命令查看是否存在SSH keys</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -al ~/.ssh</span><br><span class="line"><span class="comment"># Lists the files in your .ssh directory, if they exist</span></span><br></pre></td></tr></table></figure><p>默认的公共key的文件名如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id_dsa.pub</span><br><span class="line">id_ecdsa.pub</span><br><span class="line">id_ed25519.pub</span><br><span class="line">id_rsa.pub</span><br></pre></td></tr></table></figure><p>如果不存在key可以通过下面的方法<strong>生成一个新的SSH key</strong>,如果已经存在了忽略下面的方法直接看<strong>添加SSH key到ssh-agent</strong></p><h1 id="生成一个新的SSH-key"><a href="#生成一个新的SSH-key" class="headerlink" title="生成一个新的SSH key"></a>生成一个新的SSH key</h1><p>打开终端<br>输入下面的命令把邮箱地址替换成你自己的GitHub邮箱</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure><p>这条命令已你指定的邮箱作为标签生成一条新的ssh key</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br></pre></td></tr></table></figure><p>终端会提示你 “Enter a file in which to save the key,” 直接敲回车把key保存在指定的默认位置。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter a file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/you/.ssh/id_rsa): [Press enter]</span><br></pre></td></tr></table></figure><p>接下来会提示我们输入密码，如果不想设置密码直接留空。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): [Type a passphrase]</span><br><span class="line">Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure><h1 id="添加SSH-key到ssh-agent"><a href="#添加SSH-key到ssh-agent" class="headerlink" title="添加SSH key到ssh-agent"></a>添加SSH key到ssh-agent</h1><p>在后台打开ssh-agent，确保它在可以状态：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># start the ssh-agent in the background</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span></span><br><span class="line">Agent pid 59566</span><br></pre></td></tr></table></figure><p>添加你的 SSH key 到 ssh-agent. 如果不使用刚新生成的key而是使用已经存在的key在命令行中把 id_rsa 替换为已经存在的key的文件名.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><h1 id="添加SSH-key到GitHub账号"><a href="#添加SSH-key到GitHub账号" class="headerlink" title="添加SSH key到GitHub账号"></a>添加SSH key到GitHub账号</h1><p>复制SHH key到粘贴板</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pbcopy &lt; ~/.ssh/id_rsa.pub</span><br><span class="line"><span class="comment"># Copies the contents of the id_rsa.pub file to your clipboard</span></span><br></pre></td></tr></table></figure><blockquote><p>PS:如果<code>pbcopy</code>命令无效可以直接定位到你<code>.ssh</code>文件夹（这个文件夹是隐藏的），打开文件直接复制。</p></blockquote><p>登录GitHub在任意页面，点击右上角的头像，在弹出的菜单中点击<strong>Settings</strong>选项</p><p><img src="https://help.github.com/assets/images/help/settings/userbar-account-settings.png" alt="用户设置"></p><p>在左边栏中点击 <strong>SSH and GPG keys</strong></p><p><img src="https://help.github.com/assets/images/help/settings/settings-sidebar-ssh-keys.png" alt="设置shh keys"></p><p>点击<strong>New SSH key</strong> 或者 <strong>Add SSH key</strong></p><p><img src="https://help.github.com/assets/images/help/settings/ssh-add-ssh-key.png" alt="新建ssh key"></p><p>在”Title” 文本框中填入你的描述性文字如: “Personal MacBook Pro”</p><p>粘贴你的key到 “Key” 文本域</p><p><img src="https://help.github.com/assets/images/help/settings/ssh-key-paste.png" alt="粘贴ssh key"></p><p>点击 <strong>Add SSH key</strong></p><p><img src="https://help.github.com/assets/images/help/settings/ssh-add-key.png" alt="生成ssh key"></p><p>在弹出的提示框中输入你的 GitHub 密码</p><p><img src="https://help.github.com/assets/images/help/settings/sudo_mode_popup.png" alt="提示输入密码"></p><p>整理自[官方文档][githubhelp]<br>[githubhelp]:   <a href="https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/" target="_blank" rel="noopener">https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/</a> “GitHub官方文档”</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用Git的过程中我们常常要与中央仓库进行同步，Git提供两种同步方式https和ssh方式。两种方式各有优劣，https方式使用简单，但是每次都需要输入密码，而且速度会比较慢，所以我们更多的是使用ssh方式同步，这种方式安全性更好，不需要每次都输入密码，更重要的是比https方式速度要快，GitHub在国内的访问不稳定的国情下这点尤为重要，下面介绍了通过ssh方式同步需要做的一些前期工作。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="GitHub" scheme="https://summerandwinter.github.io/category/GitHub/"/>
    
    
      <category term="GitHub" scheme="https://summerandwinter.github.io/tag/GitHub/"/>
    
      <category term="SSH key" scheme="https://summerandwinter.github.io/tag/SSH-key/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="https://summerandwinter.github.io/markdown-syntax.html"/>
    <id>https://summerandwinter.github.io/markdown-syntax.html</id>
    <published>2016-11-17T15:28:03.000Z</published>
    <updated>2019-11-28T08:58:49.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="宗旨"><a href="#宗旨" class="headerlink" title="宗旨"></a>宗旨</h2><p>Markdown 的目标是实现「易读易写」。</p><p>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，而最大灵感来源其实是纯文本电子邮件的格式。</p><p>总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像<em>强调</em>。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p><h2 id="兼容-HTML"><a href="#兼容-HTML" class="headerlink" title="兼容 HTML"></a>兼容 HTML</h2><p>Markdown 语法的目标是：成为一种适用于网络的书写语言。</p><p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p><p>要制约的只有一些 HTML 区块元素――比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 <code>&lt;p&gt;</code> 标签。</p><p>例子如下，在 Markdown 文件里加上一段 HTML 表格：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是一个普通段落。</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;Foo&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">这是另一个普通段落。</span><br></pre></td></tr></table></figure><p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的<em>强调</em>会没有效果。</p><p>HTML 的区段（行内）标签如 <code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。</p><p>和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p><h2 id="特殊字符自动转换"><a href="#特殊字符自动转换" class="headerlink" title="特殊字符自动转换"></a>特殊字符自动转换</h2><p>在 HTML 文件中，有两个字符需要特殊处理： <code>&lt;</code>和 <code>&amp;</code> 。 <code>&lt;</code> 符号用于起始标签，<code>&amp;</code> 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 <code>&amp;lt;</code> 和 <code>&amp;amp;</code>。</p><p>&amp; 字符尤其让网络文档编写者受折磨，如果你要打「<code>AT&amp;T</code>」 ，你必须要写成「<code>AT&amp;amp;T</code>」。而网址中的 <code>&amp;</code> 字符也要转换。比如你要链接到：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://images.google.com/images?num=30&amp;q=larry+bird</span><br></pre></td></tr></table></figure><p>你必须要把网址转换写为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://images.google.com/images?num=30&amp;amp;q=larry+bird</span><br></pre></td></tr></table></figure><p>才能放到链接标签的 href 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。</p><p>Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 <code>&amp;</code> 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 <code>&amp;amp;</code>。<br>&amp;<br>所以你如果要在文档中插入一个版权符号 <code>©</code>，你可以这样写：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;copy;</span><br></pre></td></tr></table></figure><p>Markdown 会保留它不动。而若你写：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AT&amp;T</span><br></pre></td></tr></table></figure><p>Markdown 就会将它转为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AT&amp;amp;T</span><br></pre></td></tr></table></figure><p>类似的状况也会发生在 <code>&lt;</code> 符号上，因为 Markdown 允许 兼容 HTML ，如果你是把 <code>&lt;</code> 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 &lt; 5</span><br></pre></td></tr></table></figure><p>Markdown 将会把它转换为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 &amp;lt; 5</span><br></pre></td></tr></table></figure><p>不过需要注意的是，code 范围内，不论是行内还是区块， <code>&lt;</code> 和 <code>&amp;</code> 两个符号都一定会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 <code>&lt;</code> 和 <code>&amp;</code> 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）</p><h1 id="区块元素"><a href="#区块元素" class="headerlink" title="区块元素"></a>区块元素</h1><h2 id="段落和换行"><a href="#段落和换行" class="headerlink" title="段落和换行"></a>段落和换行</h2><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。</p><p>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 <code>&lt;br /&gt;</code> 标签。</p><p>如果你确实想要依赖 Markdown 来插入 <code>&lt;br /&gt;</code> 标签的话，在插入处先按入两个以上的空格然后回车。</p><p>的确，需要多费点事（多加空格）来产生 <code>&lt;br /&gt;</code> ，但是简单地「每个换行都转换为 <code>&lt;br /&gt;</code>」的方法在 Markdown 中并不适合， Markdown 中 email 式的 区块引用 和多段落的 列表 在使用换行来排版的时候，不但更好用，还更方便阅读。</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>Markdown支持两种标题语法<strong>Setext</strong>和<strong>atx</strong></p><p>atx在行首插入1到6个<code>#</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line"></span><br><span class="line">## 二级标题</span><br><span class="line"></span><br><span class="line">### 三级标题</span><br></pre></td></tr></table></figure><p><strong>PS:注意<code>#</code>和标题之间要有空格</strong></p><p>Setext用底线的形式，利用<code>=</code>和<code>-</code>表示最高阶标题和第二阶标题</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最高阶标题</span><br><span class="line">=========</span><br><span class="line">第二阶阶标题</span><br><span class="line">--------</span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号、加号或是减号作为列表标记：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*   Red</span><br><span class="line">*   Green</span><br><span class="line">*   Blue</span><br></pre></td></tr></table></figure><p>等同于：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+   Red</span><br><span class="line">+   Green</span><br><span class="line">+   Blue</span><br></pre></td></tr></table></figure><p>也等同于：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-   Red</span><br><span class="line">-   Green</span><br><span class="line">-   Blue</span><br></pre></td></tr></table></figure><p>有序列表则使用数字接着一个英文句点：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.  Bird</span><br><span class="line">2.  McHale</span><br><span class="line">3.  Parish</span><br></pre></td></tr></table></figure><p>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">&lt;li&gt;Bird&lt;/li&gt;</span><br><span class="line">&lt;li&gt;McHale&lt;/li&gt;</span><br><span class="line">&lt;li&gt;Parish&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure><p>如果你的列表标记写成：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.  Bird</span><br><span class="line">1.  McHale</span><br><span class="line">1.  Parish</span><br></pre></td></tr></table></figure><p>或甚至是：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. Bird</span><br><span class="line">1. McHale</span><br><span class="line">8. Parish</span><br></pre></td></tr></table></figure><p>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。</p><p>如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。</p><p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p><p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好<br>但是如果你懒，那也行：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span><br><span class="line">Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</span><br><span class="line">viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</span><br><span class="line">Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure></p><p>如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 <code>&lt;p&gt;</code> 标签包起来，举例来说：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*   Bird</span><br><span class="line">*   Magic</span><br></pre></td></tr></table></figure><p>会被转换为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;Bird&lt;/li&gt;</span><br><span class="line">&lt;li&gt;Magic&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>但是这个：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*   Bird</span><br><span class="line"></span><br><span class="line">*   Magic</span><br></pre></td></tr></table></figure><p>会被转换为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符<br>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*   This is a list item with two paragraphs.</span><br><span class="line"></span><br><span class="line">    This is the second paragraph in the list item. You&apos;re</span><br><span class="line">only required to indent the first line. Lorem ipsum dolor</span><br><span class="line">sit amet, consectetuer adipiscing elit.</span><br><span class="line"></span><br><span class="line">*   Another item in the same list.</span><br></pre></td></tr></table></figure><p>如果要在列表项目内放进引用，那 &gt; 就需要缩进：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*   A list item with a blockquote:</span><br><span class="line"></span><br><span class="line">    &gt; This is a blockquote</span><br><span class="line">    &gt; inside a list item.</span><br></pre></td></tr></table></figure><p>如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符<br>当然，项目列表很可能会不小心产生，像是下面这样的写法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1986. What a great season.</span><br></pre></td></tr></table></figure><p>换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1986\. What a great season.</span><br></pre></td></tr></table></figure><h2 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h2><p>Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt; ：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</span><br><span class="line">&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span><br><span class="line">&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">&gt; </span><br><span class="line">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</span><br><span class="line">&gt; id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure><p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</span><br><span class="line">consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span><br><span class="line">Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line"></span><br><span class="line">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</span><br><span class="line">id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 `&gt;’ ：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; This is the first level of quoting.</span><br><span class="line">&gt;</span><br><span class="line">&gt; &gt; This is nested blockquote.</span><br><span class="line">&gt;</span><br><span class="line">&gt; Back to the first level.</span><br></pre></td></tr></table></figure><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等<br>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择增加引用阶层。</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| Tables        | Are           | Cool  |</span><br><span class="line">| ------------- |:-------------:| -----:|</span><br><span class="line">| col 3 is      | right-aligned | $1600 |</span><br><span class="line">| col 2 is      | centered      |   $12 |</span><br><span class="line">| zebra stripes | are neat      |    $1 |</span><br></pre></td></tr></table></figure><p>这种语法生成的表格如下：</p><table><thead><tr><th>Tables</th><th style="text-align:center">Are</th><th style="text-align:right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td style="text-align:center">right-aligned</td><td style="text-align:right">$1600</td></tr><tr><td>col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td>zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>代码块实现很简单，只需要在每行代码前插入至少4个空格和一个制表符（Tab），代码框会在没有插入4个空格和一个制表符的行结束.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This is the first line </span><br><span class="line">this is the second line</span><br></pre></td></tr></table></figure><p>代码块在这里结束<br>在Hexo中用3个反引号<code>`</code>号实现代码块的功能，并且可以在首行的反引号后加语言代码来实现代码高亮显示</p><p>语言代码参考[css-classes-reference][reference]<br>[reference]:  <a href="http://highlightjs.readthedocs.io/en/latest/css-classes-reference.html" target="_blank" rel="noopener">http://highlightjs.readthedocs.io/en/latest/css-classes-reference.html</a> “css-classes-reference”</p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>可以在一行中用三个以上的星号<code>*</code>、减号<code>-</code>、底线<code>_</code>来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">****</span><br><span class="line">----</span><br><span class="line">____</span><br><span class="line">- - - -</span><br></pre></td></tr></table></figure><hr><h1 id="区段元素"><a href="#区段元素" class="headerlink" title="区段元素"></a>区段元素</h1><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。</p><p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p><p>要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">This is [an example](http://example.com/ &quot;Title&quot;) inline link.</span><br><span class="line"></span><br><span class="line">[This link](http://example.net/) has no title attribute.</span><br></pre></td></tr></table></figure><p>会产生：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;</span><br><span class="line">an example&lt;/a&gt; inline link.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no</span><br><span class="line">title attribute.&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>如果你是要链接到同样主机的资源，你可以使用相对路径：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">See my [About](/about/) page for details.</span><br></pre></td></tr></table></figure><p>参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This is [an example][id] reference-style link.</span><br></pre></td></tr></table></figure><p>你也可以选择性地在两个方括号中间加上一个空格：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This is [an example] [id] reference-style link.</span><br></pre></td></tr></table></figure><p>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[id]: http://example.com/ &quot;Optional Title Here&quot;</span><br></pre></td></tr></table></figure><p>链接内容定义的形式为：</p><p>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字<br>接着一个冒号<br>接着一个以上的空格或制表符<br>接着链接的网址<br>选择性地接着 title 内容，可以用单引号、双引号或是括弧包着<br>下面这三种链接的定义都是相同：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[foo]: http://example.com/  &quot;Optional Title Here&quot;</span><br><span class="line">[foo]: http://example.com/  &apos;Optional Title Here&apos;</span><br><span class="line">[foo]: http://example.com/  (Optional Title Here)</span><br></pre></td></tr></table></figure><p>请注意：有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。</p><p>链接网址也可以用方括号包起来：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[id]: &lt;http://example.com/&gt;  &quot;Optional Title Here&quot;</span><br></pre></td></tr></table></figure><p>你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[id]: http://example.com/longish/path/to/resource/here</span><br><span class="line">    &quot;Optional Title Here&quot;</span><br></pre></td></tr></table></figure><p>网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。<br>链接辨别标签可以有字母、数字、空白和标点符号，但是并不区分大小写，因此下面两个链接是一样的：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[link text][a]</span><br><span class="line">[link text][A]</span><br></pre></td></tr></table></figure><p>隐式链接标记功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Google][]</span><br></pre></td></tr></table></figure><p>然后定义链接内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Google]: http://google.com/</span><br></pre></td></tr></table></figure><p>由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Visit [Daring Fireball][] for more information.</span><br></pre></td></tr></table></figure><p>然后接着定义链接：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Daring Fireball]: http://daringfireball.net/</span><br></pre></td></tr></table></figure><p>链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。<br>下面是一个参考式链接的范例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I get 10 times more traffic from [Google] [1] than from</span><br><span class="line">[Yahoo] [2] or [MSN] [3].</span><br><span class="line"></span><br><span class="line">  [1]: http://google.com/        &quot;Google&quot;</span><br><span class="line">  [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;</span><br><span class="line">  [3]: http://search.msn.com/    &quot;MSN Search&quot;</span><br></pre></td></tr></table></figure><p>如果改成用链接名称的方式写：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I get 10 times more traffic from [Google][] than from</span><br><span class="line">[Yahoo][] or [MSN][].</span><br><span class="line"></span><br><span class="line">  [google]: http://google.com/        &quot;Google&quot;</span><br><span class="line">  [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;</span><br><span class="line">  [msn]:    http://search.msn.com/    &quot;MSN Search&quot;</span><br></pre></td></tr></table></figure><p>上面两种写法都会产生下面的 HTML。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot;</span><br><span class="line">title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from</span><br><span class="line">&lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt;</span><br><span class="line">or &lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)</span><br><span class="line">than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or</span><br><span class="line">[MSN](http://search.msn.com/ &quot;MSN Search&quot;).</span><br></pre></td></tr></table></figure><p>参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。</p><p>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</p><p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。</p><p>行内式的图片语法看起来像是：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![Alt text](/path/to/img.jpg)</span><br><span class="line"></span><br><span class="line">![Alt text](//cdn.jsdelivr.net/gh/summerandwinter/summerandwinter.github.io/path/to/img.jpg &quot;Optional title&quot;)</span><br></pre></td></tr></table></figure><p>详细叙述如下：</p><p>一个惊叹号 !<br>接着一个方括号，里面放上图片的替代文字<br>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。<br>参考式的图片语法则长得像这样：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![Alt text][id]</span><br></pre></td></tr></table></figure><p>「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[id]: url/to/image  &quot;Optional title attribute&quot;</span><br></pre></td></tr></table></figure><p>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>如果要标记一小段行内代码，你可以用反引号<code>`</code>把它包起来，例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Use the `printf()` function.</span><br></pre></td></tr></table></figure><p>会产生：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">There is a literal backtick (`) here.</span><br></pre></td></tr></table></figure><p>这段语法会产生：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A single backtick in a code span: `` ` ``</span><br><span class="line"></span><br><span class="line">A backtick-delimited string in a code span: `` `foo` ``</span><br></pre></td></tr></table></figure><p>会产生：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>在代码区段内，&amp; 和方括号都会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Please don&apos;t use any `&lt;blink&gt;` tags.</span><br></pre></td></tr></table></figure><p>转为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;Please don&apos;t use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>也可以这样写：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.</span><br></pre></td></tr></table></figure><p>以产生：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded</span><br><span class="line">equivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;</span><br></pre></td></tr></table></figure><h2 id="粗体与斜体"><a href="#粗体与斜体" class="headerlink" title="粗体与斜体"></a>粗体与斜体</h2><p>用两个<code>*</code>或<code>_</code> 包含一段文本就是粗体的语法（转换为<code>&lt;em&gt;</code>标签）</p><p>用一个<code>*</code>或<code>_</code> 包含一段文本就是斜体的语法（转换为<code>&lt;strong&gt;</code>标签）。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*斜体*</span><br><span class="line">_斜体</span><br><span class="line">___粗体__</span><br><span class="line">**粗体**</span><br></pre></td></tr></table></figure><p>可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。<br>可以直接插在文字中间，但是如果你的 <code>*</code> 和 <code>_</code> 两边都有空白的话，它们就只会被当成普通的符号。如果要在文字前后直接插入普通的星号或底线，可以用反斜线插入它们前面。</p><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><h2 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h2><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;http://example.com/&gt;</span><br></pre></td></tr></table></figure><p>Markdown 会转为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;address@example.com&gt;</span><br></pre></td></tr></table></figure><p>Markdown 会转成：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;</span><br><span class="line">&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;</span><br><span class="line">&amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;</span><br><span class="line">&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>在浏览器里面，这段字串（其实是 <code>&lt;a href=&quot;mailto:address@example.com&quot;&gt;address@example.com&lt;/a&gt;</code>）会变成一个可以点击的「<a href="mailto:address@example.com" target="_blank" rel="noopener">address@example.com</a>」链接。</p><p>（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）</p><h2 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h2><p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 <em> 标签），你可以在星号的前面加上反斜杠：</em></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\*literal asterisks\*</span><br></pre></td></tr></table></figure><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   底线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  括弧</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   惊叹号</span><br></pre></td></tr></table></figure><p>整理自[官方文档][endoc] [中文版][cndoc]<br>[endoc]:  <a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="noopener">http://daringfireball.net/projects/markdown/syntax</a> “官方文档”<br>[cndoc]:  <a href="http://www.appinn.com/markdown/index.html" target="_blank" rel="noopener">http://www.appinn.com/markdown/index.html</a> “中文版”</p>]]></content>
    
    <summary type="html">
    
      Markdown语法介绍，概况了一些Markdown基本的用法，整理自Markdown官方文档。
    
    </summary>
    
      <category term="Markdown" scheme="https://summerandwinter.github.io/category/Markdown/"/>
    
    
      <category term="Markdown" scheme="https://summerandwinter.github.io/tag/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Windows环境安装Hexo并基于GitHub Pages搭建博客</title>
    <link href="https://summerandwinter.github.io/build-a-blog-with-hexo-and-github-pages-in-windows.html"/>
    <id>https://summerandwinter.github.io/build-a-blog-with-hexo-and-github-pages-in-windows.html</id>
    <published>2016-11-17T15:26:39.000Z</published>
    <updated>2019-11-28T08:58:49.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文中<br>Hexo安装目录为 D:\blog<br>GitHub的账号名为 summer</p><h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><p>Node.js<br>Git<br>安装最新版的Node.js和Git</p><h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><p>在任意位置点击鼠标右键选择Git bash<br>利用npm命令安装<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli --save</span><br></pre></td></tr></table></figure></p><h1 id="创建hexo文件夹"><a href="#创建hexo文件夹" class="headerlink" title="创建hexo文件夹"></a>创建hexo文件夹</h1><p>Hexo安装目录内点击鼠标右键，选择Git bash<br>执行下面的命令即会自动在目标文件夹建立网站所需要的所有文件。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init </span><br><span class="line">hexo install(安装依赖包)</span><br></pre></td></tr></table></figure></p><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>在浏览器中输入地址：<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 查看是否启用成功</p><h1 id="创建GitHub-repository"><a href="#创建GitHub-repository" class="headerlink" title="创建GitHub repository"></a>创建GitHub repository</h1><p>在GitHub中创建一个新的repository，如我的账号是summer,应该创建的名字是summer.github.io</p><h1 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h1><p>编辑Hexo安装目录下的_config.yml文件</p><blockquote><p>deploy:<br>  type: git<br>  repo: <a href="https://github.com/summer/summer.github.io.git" target="_blank" rel="noopener">https://github.com/summer/summer.github.io.git</a><br>  branch: master</p></blockquote><h1 id="安装deploy依赖"><a href="#安装deploy依赖" class="headerlink" title="安装deploy依赖"></a>安装deploy依赖</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h1 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p><strong>PS：每次修改本地文件后，需要hexo generate才能保存。每次使用命令时，都要在Hexo安装目录下。</strong> </p>]]></content>
    
    <summary type="html">
    
      介绍在Windows环境下安装Hexo静态博客系统，并且用户GitHub Page 搭建免费的个人博客
    
    </summary>
    
      <category term="Hexo" scheme="https://summerandwinter.github.io/category/Hexo/"/>
    
    
      <category term="GitHub" scheme="https://summerandwinter.github.io/tag/GitHub/"/>
    
      <category term="Blog" scheme="https://summerandwinter.github.io/tag/Blog/"/>
    
      <category term="Hexo" scheme="https://summerandwinter.github.io/tag/Hexo/"/>
    
      <category term="GitHub Pages" scheme="https://summerandwinter.github.io/tag/GitHub-Pages/"/>
    
  </entry>
  
  <entry>
    <title>Apache与Tomcat实现负载均衡和集群</title>
    <link href="https://summerandwinter.github.io/apachetomcatloadbalancingandclustering.html"/>
    <id>https://summerandwinter.github.io/apachetomcatloadbalancingandclustering.html</id>
    <published>2016-02-19T14:49:01.000Z</published>
    <updated>2019-11-28T08:58:49.415Z</updated>
    
    <content type="html"><![CDATA[<p>参照网上的教程实现了Apache与Tomcat实现负载均衡和集群，中间走了一些弯路，最终还是配置成功了。不过只是配置成功了，中间很多的参数和实现的原理都不是很明白，留到以后继续深挖，这里做个记录备忘。<br><a id="more"></a></p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>我用了两台机器，机器A和机器B</p><p>Win7 32位   Java 版本 “1.8.0_20”</p><p>机器A的IP为：192.168.1.72 部署 apache和两个tomat(tomcat1,tomcat2)</p><p>机器B的IP为：192.168.1.105 部署一个tomcat（tomcat3）</p><p><strong>软件版本和下载地址</strong></p><p><a href="http://www.apachehaus.com/downloads/httpd-2.2.31-x86-r2.zip" target="_blank" rel="noopener">httpd-2.2.31-x86-r2</a></p><p><a href="http://mirrors.cnnic.cn/apache/tomcat/tomcat-7/v7.0.68/bin/apache-tomcat-7.0.68.zip" target="_blank" rel="noopener">apache-tomcat-7.0.68</a></p><p><a href="http://archive.apache.org/dist/tomcat/tomcat-connectors/jk/binaries/win32/jk-1.2.30/mod_jk-1.2.30-httpd-2.2.3.so" target="_blank" rel="noopener">mod_jk-1.2.30-httpd-2.2.3.so</a></p><p><strong>调试Apache和Tomcat</strong></p><p>首先要在两台机器上成功启动apache和tomcat</p><p><strong>部署Apache</strong></p><p>在机器A上解压httpd-2.2.31-x86-r2.zip，把apache22文件夹拷贝到硬盘根目录，最好是根目录，默认的配置都是配的跟目录，在windows环境下要修改很多配置文件才能启动成功，如果是根目录能直接启动成功。</p><p><strong>部署Tomcat</strong></p><p>在机器A上拷贝两个tomcat分别命名为tomcat1,tomcat2,在机器B拷贝一个tomcat,命名为tomcat3。</p><p>由于在机器A上有两个tomcat，为避免端口冲突tomcat1保持默认配置，修改tomcat2端口。</p><p><img src="//cdn.jsdelivr.net/gh/summerandwinter/summerandwinter.github.io/assets/images/articles/tomcat-config-port.jpg" alt title="修改Tomcat端口。"></p><p>如果Apache和3个Tomcat能成功启动这里步就算完成了。</p><p>为能在页面上直观的感受到负载均衡的效果需要对tomcat中的首页做一点小的改动<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">”text/html;</span> <span class="attr">charset</span>=<span class="string">utf-8”</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Cluster Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">tomcat1</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>用上面的代码替换tomcat 下<code>webapps\ROOT</code>目录中的<code>index.jsp</code>文件，并把tomcat1替换当前所在tomcat的名称。</p><h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><p><strong>给apache安装mod_jk链接模块</strong></p><p>把<code>mod_jk-1.2.30-httpd-2.2.3.so</code>重名名为<code>mod_jk.so</code>（重命名不是必须的，也可以不重命名，这里为了名称的简洁，个人习惯）拷贝到apache22下的<code>modules</code>文件夹。</p><p>在config目录下新建两个文件<code>mod_jk.conf</code>和<code>workers.properties</code></p><p>下面是我的配置文件</p><p>mod_jk.conf<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#加载mod_jk Module</span><br><span class="line">LoadModule jk_module modules/mod_jk.so</span><br><span class="line">#指定 workers.properties文件路径</span><br><span class="line">JkWorkersFile conf/workers.properties</span><br><span class="line">#指定那些请求交给tomcat处理,&quot;controller&quot;为在workers.propertise里指定的负载分配控制器</span><br><span class="line">JkMount /* controller</span><br></pre></td></tr></table></figure></p><p>workers.properties<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">worker.list = controller,tomcat1,tomcat2,tomcat3 #server 列表</span><br><span class="line">#========tomcat1========</span><br><span class="line">worker.tomcat1.port=8009          #ajp13 端口号，在tomcat下server.xml配置,默认8009</span><br><span class="line">worker.tomcat1.host=192.168.1.72  #tomcat1（机器A）的主机地址，如不为本机，请填写ip地址</span><br><span class="line">worker.tomcat1.type=ajp13</span><br><span class="line">worker.tomcat1.lbfactor = 1       #server的加权比重，值越高，分得的请求越多</span><br><span class="line">#========tomcat2========</span><br><span class="line">worker.tomcat2.port=8109 </span><br><span class="line">worker.tomcat2.host=192.168.1.72   #机器A</span><br><span class="line">worker.tomcat2.type=ajp13</span><br><span class="line">worker.tomcat2.lbfactor = 1 </span><br><span class="line">#========tomcat3========</span><br><span class="line">worker.tomcat3.port=8009 </span><br><span class="line">worker.tomcat3.host=192.168.1.105   #机器B</span><br><span class="line">worker.tomcat3.type=ajp13</span><br><span class="line">worker.tomcat3.lbfactor = 1 </span><br><span class="line">#========controller,负载均衡控制器========</span><br><span class="line">worker.controller.type=lb</span><br><span class="line">worker.controller.balanced_workers=tomcat1,tomcat2,tomcat3   #指定分担请求的tomcat</span><br><span class="line">worker.controller.sticky_session=1</span><br></pre></td></tr></table></figure></p><p>在<code>httpd.conf</code>最后加上：<br><figure class="highlight plain"><figcaption><span>JK module settings</span></figcaption><table><tr><td class="code"><pre><span class="line">Include conf/mod_jk.conf</span><br></pre></td></tr></table></figure></p><p>重启apache服务访问 <a href="http://192.168.1.72" target="_blank" rel="noopener">http://192.168.1.72</a> ,不断刷新页面，如果页面上随机轮换出现tomcat1,tomcat2,tomcat3字样则说明配置成功。</p><p>到这里apache和tomcat的负载均衡就配置好了，apache会按照权重值转发请求到三个tomcat中的一个，但是现在每个tomcat之间还没有实现session复制（也就是集群），每次转发到不同的tomcat时session都会不一样，接下来我们要做的就是配置tomcat的集群。</p><h1 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h1><p>修改tomcat1,tomcat2,tomcat3配置文件<code>server.xml</code>中的：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Cluster</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.ha.tcp.SimpleTcpCluster"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>这个版本的tomcat中默认为被注释状态，取消注释，并修改为下面这样</p><p><img src="//cdn.jsdelivr.net/gh/summerandwinter/summerandwinter.github.io/assets/images/articles/tomcat-config-xml.jpg" alt title="修改Tomcat配置"></p><p>下面为文字版<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Cluster</span> <span class="attr">className</span>=<span class="string">”org.apache.catalina.ha.tcp.SimpleTcpCluster”</span> <span class="attr">channelSendOptions</span>=<span class="string">”6”</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">Manager</span> <span class="attr">className</span>=<span class="string">”org.apache.catalina.ha.session.BackupManager”</span></span></span><br><span class="line"><span class="tag"> <span class="attr">expireSessionsOnShutdown</span>=<span class="string">”false”</span></span></span><br><span class="line"><span class="tag"> <span class="attr">notifyListenersOnReplication</span>=<span class="string">”true”</span></span></span><br><span class="line"><span class="tag"> <span class="attr">mapSendOptions</span>=<span class="string">”6”/</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">Manager</span> <span class="attr">className</span>=<span class="string">”org.apache.catalina.ha.session.DeltaManager”</span></span></span><br><span class="line"><span class="tag"> <span class="attr">expireSessionsOnShutdown</span>=<span class="string">”false”</span></span></span><br><span class="line"><span class="tag"> <span class="attr">notifyListenersOnReplication</span>=<span class="string">”true”/</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">Channel</span> <span class="attr">className</span>=<span class="string">”org.apache.catalina.tribes.group.GroupChannel”</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">Membership</span> <span class="attr">className</span>=<span class="string">”org.apache.catalina.tribes.membership.McastService”</span></span></span><br><span class="line"><span class="tag"> <span class="attr">bind</span>=<span class="string">”192.168.1.72”</span></span></span><br><span class="line"><span class="tag"> <span class="attr">address</span>=<span class="string">”228.0.0.4”</span></span></span><br><span class="line"><span class="tag"> <span class="attr">port</span>=<span class="string">”45564”</span></span></span><br><span class="line"><span class="tag"> <span class="attr">frequency</span>=<span class="string">”500”</span></span></span><br><span class="line"><span class="tag"> <span class="attr">dropTime</span>=<span class="string">”3000”/</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">Receiver</span> <span class="attr">className</span>=<span class="string">”org.apache.catalina.tribes.transport.nio.NioReceiver”</span></span></span><br><span class="line"><span class="tag"> <span class="attr">address</span>=<span class="string">”192.168.1.72”</span></span></span><br><span class="line"><span class="tag"> <span class="attr">port</span>=<span class="string">”4001”</span></span></span><br><span class="line"><span class="tag"> <span class="attr">selectorTimeout</span>=<span class="string">”100”</span></span></span><br><span class="line"><span class="tag"> <span class="attr">maxThreads</span>=<span class="string">”6”/</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">Sender</span> <span class="attr">className</span>=<span class="string">”org.apache.catalina.tribes.transport.ReplicationTransmitter”</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">Transport</span> <span class="attr">className</span>=<span class="string">”org.apache.catalina.tribes.transport.nio.PooledParallelSender”/</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">Sender</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">Interceptor</span> <span class="attr">className</span>=<span class="string">”org.apache.catalina.tribes.group.interceptors.TcpFailureDetector”/</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">Interceptor</span> <span class="attr">className</span>=<span class="string">”org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor”/</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">Interceptor</span> <span class="attr">className</span>=<span class="string">”org.apache.catalina.tribes.group.interceptors.ThroughputInterceptor”/</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">Channel</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">”org.apache.catalina.ha.tcp.ReplicationValve”</span></span></span><br><span class="line"><span class="tag"> <span class="attr">filter</span>=<span class="string">”..gif;..js;..jpg;..png;..htm;..html;..css;..txt;”/</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ClusterListener</span> <span class="attr">className</span>=<span class="string">”org.apache.catalina.ha.session.ClusterSessionListener”/</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">Cluster</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>依次重启tomcat1,tomcat2,tomcat3,如果控制台打印出下面这样的字样说明集群配置成功</p><p><img src="//cdn.jsdelivr.net/gh/summerandwinter/summerandwinter.github.io/assets/images/articles/cmd-output.jpg" alt title="控制台打印结果"><br>接下来我们来验证下集群配置是否成功</p><p>1.修改每个tomcat下<code>webapps\ROOT\WEB-INF</code>目录下的<code>web.xml</code>文件中加入<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distrbutable</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>配合实现session共享</p><p>2.修改每个tomcat 下<code>webapps\ROOT</code>目录中的<code>index.jsp</code></p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=”text/html; charset=utf-<span class="number">8</span>” %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=”java.util.*” %&gt;</span><br><span class="line">&lt;html&gt;&lt;head&gt;&lt;title&gt;Cluster App Test&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">System.out.println(“SessionID:” + session.getId());</span><br><span class="line">%&gt;</span><br><span class="line">Server Info:</span><br><span class="line">&lt;%</span><br><span class="line">out.println(request.getServerName() + “ : “ + request.getServerPort()+”&lt;br&gt;”);%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">out.println(“&lt;br&gt; ID “ + session.getId()+”&lt;br&gt;”);</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>3.重启tomcat,访问 <a href="http://192.168.1.72" target="_blank" rel="noopener">http://192.168.1.72</a> 观察每个tomcat控制台打印的信息，如果每个tomcat打印的sessionid都一样说明集群配置成功了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参照网上的教程实现了Apache与Tomcat实现负载均衡和集群，中间走了一些弯路，最终还是配置成功了。不过只是配置成功了，中间很多的参数和实现的原理都不是很明白，留到以后继续深挖，这里做个记录备忘。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Apache" scheme="https://summerandwinter.github.io/category/Apache/"/>
    
    
      <category term="Apache" scheme="https://summerandwinter.github.io/tag/Apache/"/>
    
      <category term="Tomcat" scheme="https://summerandwinter.github.io/tag/Tomcat/"/>
    
      <category term="负载均衡" scheme="https://summerandwinter.github.io/tag/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
      <category term="集群" scheme="https://summerandwinter.github.io/tag/%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis学习笔记</title>
    <link href="https://summerandwinter.github.io/mybatis-study-note.html"/>
    <id>https://summerandwinter.github.io/mybatis-study-note.html</id>
    <published>2013-12-17T15:30:59.000Z</published>
    <updated>2019-11-28T08:58:49.415Z</updated>
    
    <content type="html"><![CDATA[<p>在ibatis配置文件写SQL语句的时候对于一些比如“&lt;”,”&gt;”,”&lt;&gt;”,”&amp;”,” ‘ “,” “ “是不能够识别的，并且会抛异常。</p><p>一般可以如下改写：<code>&amp;amp;lt; &amp;lt;</code>    <code>&amp;amp;gt;  &amp;gt;</code>       <code>&amp;amp;lt;&amp;amp;gt; &amp;lt;&amp;gt;</code>     <code>&amp;amp;amp; &amp;amp;</code> <code>&amp;amp;apos;  &#39;</code>     <code>&amp;amp;quot; &quot;</code></p><p>或者使用 &lt;![CDATA[”+“]]&gt;</p>]]></content>
    
    <summary type="html">
    
      记录一些MyBatis学习过程中经常用到的知识点，很简单常用到但是又记不住，做个记录后面慢慢补充
    
    </summary>
    
      <category term="Java" scheme="https://summerandwinter.github.io/category/Java/"/>
    
    
      <category term="MyBatis" scheme="https://summerandwinter.github.io/tag/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Keycode对照表</title>
    <link href="https://summerandwinter.github.io/javascript-event-keycode.html"/>
    <id>https://summerandwinter.github.io/javascript-event-keycode.html</id>
    <published>2013-11-27T09:58:25.000Z</published>
    <updated>2019-11-28T08:58:49.415Z</updated>
    
    <content type="html"><![CDATA[<p> <strong>字母和数字键的键码值(keyCode)</strong> </p><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">键码</th><th style="text-align:center">按键</th><th style="text-align:center">键码</th><th style="text-align:center">按键</th><th style="text-align:center">键码</th><th style="text-align:center">按键</th><th style="text-align:center">键码</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">65</td><td style="text-align:center">J</td><td style="text-align:center">74</td><td style="text-align:center">S</td><td style="text-align:center">65</td><td style="text-align:center">1</td><td style="text-align:center">49</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">66</td><td style="text-align:center">K</td><td style="text-align:center">75</td><td style="text-align:center">T</td><td style="text-align:center">65</td><td style="text-align:center">2</td><td style="text-align:center">50</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">67</td><td style="text-align:center">L</td><td style="text-align:center">76</td><td style="text-align:center">U</td><td style="text-align:center">65</td><td style="text-align:center">3</td><td style="text-align:center">51</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">68</td><td style="text-align:center">M</td><td style="text-align:center">77</td><td style="text-align:center">V</td><td style="text-align:center">65</td><td style="text-align:center">4</td><td style="text-align:center">52</td></tr><tr><td style="text-align:center">E</td><td style="text-align:center">69</td><td style="text-align:center">N</td><td style="text-align:center">78</td><td style="text-align:center">W</td><td style="text-align:center">65</td><td style="text-align:center">5</td><td style="text-align:center">53</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">70</td><td style="text-align:center">O</td><td style="text-align:center">79</td><td style="text-align:center">X</td><td style="text-align:center">65</td><td style="text-align:center">6</td><td style="text-align:center">54</td></tr><tr><td style="text-align:center">G</td><td style="text-align:center">71</td><td style="text-align:center">P</td><td style="text-align:center">80</td><td style="text-align:center">Y</td><td style="text-align:center">65</td><td style="text-align:center">7</td><td style="text-align:center">55</td></tr><tr><td style="text-align:center">H</td><td style="text-align:center">72</td><td style="text-align:center">Q</td><td style="text-align:center">81</td><td style="text-align:center">Z</td><td style="text-align:center">65</td><td style="text-align:center">8</td><td style="text-align:center">56</td></tr><tr><td style="text-align:center">I</td><td style="text-align:center">73</td><td style="text-align:center">R</td><td style="text-align:center">82</td><td style="text-align:center">0</td><td style="text-align:center">65</td><td style="text-align:center">9</td><td style="text-align:center">57</td></tr></tbody></table><p> <strong>数字键盘和功能键键码值(keyCode)</strong> </p><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">键码</th><th style="text-align:center">按键</th><th style="text-align:center">键码</th><th style="text-align:center">按键</th><th style="text-align:center">键码</th><th style="text-align:center">按键</th><th style="text-align:center">键码</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">96</td><td style="text-align:center">8</td><td style="text-align:center">104</td><td style="text-align:center">F1</td><td style="text-align:center">112</td><td style="text-align:center">F7</td><td style="text-align:center">118</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">97</td><td style="text-align:center">9</td><td style="text-align:center">105</td><td style="text-align:center">F2</td><td style="text-align:center">113</td><td style="text-align:center">F8</td><td style="text-align:center">119</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">98</td><td style="text-align:center">*</td><td style="text-align:center">106</td><td style="text-align:center">F3</td><td style="text-align:center">114</td><td style="text-align:center">F9</td><td style="text-align:center">120</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">99</td><td style="text-align:center">+</td><td style="text-align:center">107</td><td style="text-align:center">F4</td><td style="text-align:center">115</td><td style="text-align:center">F10</td><td style="text-align:center">121</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">100</td><td style="text-align:center">Enter</td><td style="text-align:center">108</td><td style="text-align:center">F5</td><td style="text-align:center">116</td><td style="text-align:center">F11</td><td style="text-align:center">122</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">101</td><td style="text-align:center">-</td><td style="text-align:center">109</td><td style="text-align:center">F6</td><td style="text-align:center">117</td><td style="text-align:center">F12</td><td style="text-align:center">123</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">102</td><td style="text-align:center">.</td><td style="text-align:center">110</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">103</td><td style="text-align:center">/</td><td style="text-align:center">111</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p> <strong>控制键键码值(keyCode)</strong>     </p><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">键码</th><th style="text-align:center">按键</th><th style="text-align:center">键码</th><th style="text-align:center">按键</th><th style="text-align:center">键码</th><th style="text-align:center">按键</th><th style="text-align:center">键码</th></tr></thead><tbody><tr><td style="text-align:center">BackSpace</td><td style="text-align:center">8</td><td style="text-align:center">Esc</td><td style="text-align:center">27</td><td style="text-align:center">Right Arrow</td><td style="text-align:center">39</td><td style="text-align:center">-_</td><td style="text-align:center">189</td></tr><tr><td style="text-align:center">Tab</td><td style="text-align:center">9</td><td style="text-align:center">Spacebar</td><td style="text-align:center">32</td><td style="text-align:center">Dw Arrow</td><td style="text-align:center">40</td><td style="text-align:center">.&gt;</td><td style="text-align:center">190</td></tr><tr><td style="text-align:center">Clear</td><td style="text-align:center">12</td><td style="text-align:center">Page Up</td><td style="text-align:center">33</td><td style="text-align:center">Insert</td><td style="text-align:center">45</td><td style="text-align:center">/?</td><td style="text-align:center">191</td></tr><tr><td style="text-align:center">Enter</td><td style="text-align:center">13</td><td style="text-align:center">Page Down</td><td style="text-align:center">34</td><td style="text-align:center">Delete</td><td style="text-align:center">46</td><td style="text-align:center">`~</td><td style="text-align:center">192</td></tr><tr><td style="text-align:center">Shift</td><td style="text-align:center">16</td><td style="text-align:center">End</td><td style="text-align:center">35</td><td style="text-align:center">Num Lock</td><td style="text-align:center">144</td><td style="text-align:center">[{</td><td style="text-align:center">219</td></tr><tr><td style="text-align:center">Control</td><td style="text-align:center">17</td><td style="text-align:center">Home</td><td style="text-align:center">36</td><td style="text-align:center">;:</td><td style="text-align:center">186</td><td style="text-align:center">\&brvbar;</td><td style="text-align:center">220</td></tr><tr><td style="text-align:center">Alt</td><td style="text-align:center">18</td><td style="text-align:center">Left Arrow</td><td style="text-align:center">37</td><td style="text-align:center">=+</td><td style="text-align:center">187</td><td style="text-align:center">]}</td><td style="text-align:center">221</td></tr><tr><td style="text-align:center">Cape Lock</td><td style="text-align:center">20</td><td style="text-align:center">Up Arrow</td><td style="text-align:center">38</td><td style="text-align:center">,&lt;</td><td style="text-align:center">188</td><td style="text-align:center">‘”</td><td style="text-align:center">222</td></tr></tbody></table><p> <strong>多媒体键码值(keyCode)</strong> </p><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">键码</th><th style="text-align:center">按键</th><th style="text-align:center">键码</th><th style="text-align:center">按键</th><th style="text-align:center">键码</th><th style="text-align:center">按键</th><th style="text-align:center">键码</th></tr></thead><tbody><tr><td style="text-align:center">音量加</td><td style="text-align:center">175</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">音量减</td><td style="text-align:center">174</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">停止</td><td style="text-align:center">179</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">静音</td><td style="text-align:center">173</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">浏览器</td><td style="text-align:center">172</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">邮件</td><td style="text-align:center">180</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">搜索</td><td style="text-align:center">170</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">收藏</td><td style="text-align:center">171</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      JavaScript中常用到的一些Keycode对照表，做个记录以后做参考。
    
    </summary>
    
      <category term="JavaScript" scheme="https://summerandwinter.github.io/category/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://summerandwinter.github.io/tag/JavaScript/"/>
    
      <category term="keycode" scheme="https://summerandwinter.github.io/tag/keycode/"/>
    
  </entry>
  
  <entry>
    <title>一些MySQL代码片段</title>
    <link href="https://summerandwinter.github.io/some-mysql-code.html"/>
    <id>https://summerandwinter.github.io/some-mysql-code.html</id>
    <published>2013-11-14T16:27:49.000Z</published>
    <updated>2019-11-28T08:58:49.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="获取表结构"><a href="#获取表结构" class="headerlink" title="获取表结构"></a>获取表结构</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT   </span><br><span class="line">cols.TABLE_SCHEMA,                    //数据库名  </span><br><span class="line">cols.TABLE_NAME,                        //表名  </span><br><span class="line">cols.COLUMN_NAME,                    //列名  </span><br><span class="line">cols.ORDINAL_POSITION,             //列明排序  </span><br><span class="line">cols.COLUMN_DEFAULT,               //默认值  </span><br><span class="line">cols.IS_NULLABLE,                       //是否允许控制   </span><br><span class="line">cols.DATA_TYPE,                           //数据类型  </span><br><span class="line">cols.CHARACTER_MAXIMUM_LENGTH,     //最大长度（字符为单位）  </span><br><span class="line">cols.CHARACTER_OCTET_LENGTH,       //最大长度（字节为单位）  </span><br><span class="line">cols.NUMERIC_PRECISION,            //精度  </span><br><span class="line">cols.NUMERIC_SCALE,                //小数位数  </span><br><span class="line">cols.COLUMN_KEY,                   //主键  </span><br><span class="line">cols.COLUMN_COMMENT                //备注  </span><br><span class="line">FROM                                 </span><br><span class="line">information_schema.`COLUMNS` AS cols   </span><br><span class="line">WHERE cols.TABLE_SCHEMA = ’databasename’   </span><br><span class="line">AND cols.TABLE_NAME = ’tablename’;</span><br></pre></td></tr></table></figure><p>其他字段</p><table><thead><tr><th style="text-align:left">列名</th><th style="text-align:left">数据类型</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">TABLE_CATALOG</td><td style="text-align:left">nvarchar(128)</td><td style="text-align:left">表限定符。</td></tr><tr><td style="text-align:left">TABLE_SCHEMA</td><td style="text-align:left">nvarchar(128)</td><td style="text-align:left">表所有者。</td></tr><tr><td style="text-align:left">TABLE_NAME</td><td style="text-align:left">nvarchar(128)</td><td style="text-align:left">表名。</td></tr><tr><td style="text-align:left">COLUMN_NAME</td><td style="text-align:left">nvarchar(128)</td><td style="text-align:left">列名。</td></tr><tr><td style="text-align:left">ORDINAL_POSITION</td><td style="text-align:left">smallint</td><td style="text-align:left">列标识号。</td></tr><tr><td style="text-align:left">COLUMN_DEFAULT</td><td style="text-align:left">nvarchar(4000)</td><td style="text-align:left">列的默认值。</td></tr><tr><td style="text-align:left">IS_NULLABLE</td><td style="text-align:left">varchar(3)</td><td style="text-align:left">列的为空性。如果列允许 NULL，那么该列返回 YES。否则，返回 NO。</td></tr><tr><td style="text-align:left">DATA_TYPE</td><td style="text-align:left">nvarchar(128)</td><td style="text-align:left">系统提供的数据类型。</td></tr><tr><td style="text-align:left">CHARACTER_MAXIMUM_LENGTH</td><td style="text-align:left">smallint</td><td style="text-align:left">以字符为单位的最大长度，适于二进制数据、字符数据，或者文本和图像数据。否则，返回 NULL。</td></tr><tr><td style="text-align:left">CHARACTER_OCTET_LENGTH</td><td style="text-align:left">smallint</td><td style="text-align:left">以字节为单位的最大长度，适于二进制数据、字符数据，或者文本和图像数据。否则，返回 NULL。</td></tr><tr><td style="text-align:left">NUMERIC_PRECISION</td><td style="text-align:left">tinyint</td><td style="text-align:left">近似数字数据、精确数字数据、整型数据或货币数据的精度。否则，返回 NULL。</td></tr><tr><td style="text-align:left">NUMERIC_PRECISION_RADIX</td><td style="text-align:left">smallint</td><td style="text-align:left">近似数字数据、精确数字数据、整型数据或货币数据的精度基数。否则，返回 NULL。</td></tr><tr><td style="text-align:left">NUMERIC_SCALE</td><td style="text-align:left">tinyint</td><td style="text-align:left">近似数字数据、精确数字数据、整数数据或货币数据的小数位数。否则，返回 NULL。</td></tr><tr><td style="text-align:left">DATETIME_PRECISION</td><td style="text-align:left">smallint</td><td style="text-align:left">datetime 及 SQL-92 interval 数据类型的子类型代码。对于其它数据类型，返回 NULL。</td></tr><tr><td style="text-align:left">CHARACTER_SET_CATALOG</td><td style="text-align:left">varchar(6)</td><td style="text-align:left">如果列是字符数据或 text 数据类型，那么返回 master，指明字符集所在的数据库。否则，返回 NULL。</td></tr><tr><td style="text-align:left">CHARACTER_SET_SCHEMA</td><td style="text-align:left">varchar(3)</td><td style="text-align:left">如果列是字符数据或 text 数据类型，那么返回 DBO，指明字符集的所有者名称。否则，返回 NULL。</td></tr><tr><td style="text-align:left">CHARACTER_SET_NAME</td><td style="text-align:left">nvarchar(128)</td><td style="text-align:left">如果该列是字符数据或 text 数据类型，那么为字符集返回唯一的名称。否则，返回 NULL。</td></tr><tr><td style="text-align:left">COLLATION_CATALOG</td><td style="text-align:left">varchar(6)</td><td style="text-align:left">如果列是字符数据或 text 数据类型，那么返回 master，指明在其中定义排序次序的数据库。否则此列为 NULL。</td></tr><tr><td style="text-align:left">COLLATION_SCHEMA</td><td style="text-align:left">varchar(3)</td><td style="text-align:left">返回 DBO，为字符数据或 text 数据类型指明排序次序的所有者。否则，返回 NULL。</td></tr><tr><td style="text-align:left">COLLATION_NAME</td><td style="text-align:left">nvarchar(128)</td><td style="text-align:left">如果列是字符数据或 text 数据类型，那么为排序次序返回唯一的名称。否则，返回 NULL。</td></tr><tr><td style="text-align:left">DOMAIN_CATALOG</td><td style="text-align:left">nvarchar(128)</td><td style="text-align:left">如果列是一种用户定义数据类型，那么该列是某个数据库名称，在该数据库名中创建了这种用户定义数据类型。否则，返回 NULL。</td></tr><tr><td style="text-align:left">DOMAIN_SCHEMA</td><td style="text-align:left">nvarchar(128)</td><td style="text-align:left">如果列是一种用户定义数据类型，那么该列是这种用户定义数据类型的创建者。否则，返回 NULL。</td></tr><tr><td style="text-align:left">DOMAIN_NAME</td><td style="text-align:left">nvarchar(128)</td><td style="text-align:left">如果列是一种用户定义数据类型，那么该列是这种用户定义数据类型的名称。否则，返回 NULL。</td></tr></tbody></table><h1 id="合并字段"><a href="#合并字段" class="headerlink" title="合并字段"></a>合并字段</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT GROUP_CONCAT(col_name order by order_col_name asc SEPARATOR ”) AS   </span><br><span class="line">screen_name FROM table_name  </span><br><span class="line">WHERE …</span><br></pre></td></tr></table></figure><h1 id="合并字段后插入同一张表"><a href="#合并字段后插入同一张表" class="headerlink" title="合并字段后插入同一张表"></a>合并字段后插入同一张表</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO tablename(  </span><br><span class="line">clos,…,something  </span><br><span class="line">      ) VALUES (  </span><br><span class="line">vals,…,  </span><br><span class="line">      (SELECT temp.screen_name FROM (  </span><br><span class="line">      SELECT CONCAT(GROUP_CONCAT(col_name order by order_col_name asc SEPARATOR ”),’add_str’ )  </span><br><span class="line">      AS screen_name   </span><br><span class="line">      FROM tablename  </span><br><span class="line">      WHERE…  </span><br><span class="line">)temp  </span><br><span class="line">      )  </span><br><span class="line">      )   </span><br><span class="line">```      </span><br><span class="line"># 随机查询</span><br><span class="line">**1.最简单的方法 在ORDER BY条件中使用 RAND()方法(资源消耗大，速度慢)**</span><br><span class="line">```mysql</span><br><span class="line">SELECT * FROM table ORDER BY RAND() LIMIT 1</span><br></pre></td></tr></table></figure><p><strong>2.询max(id) * rand()来随机获取数据</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT *  </span><br><span class="line">FROM `table`  </span><br><span class="line">WHERE id &gt;= (SELECT FLOOR( MAX(id) * RAND()) FROM `table` )  </span><br><span class="line">ORDER BY id LIMIT 1;</span><br></pre></td></tr></table></figure></p><p><strong>3.或者使用JOIN方法（比用WHERE效率高）</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT *  </span><br><span class="line">FROM `table` AS t1 JOIN (SELECT ROUND(RAND() * (SELECT MAX(id) FROM `table`)) AS id) AS t2  </span><br><span class="line">WHERE t1.id &gt;= t2.id  </span><br><span class="line">ORDER BY t1.id ASC LIMIT 1;</span><br></pre></td></tr></table></figure><p><strong>4.优化后</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM `table`  </span><br><span class="line">WHERE id &gt;= (SELECT floor(RAND() * (SELECT MAX(id) FROM `table`)))  </span><br><span class="line">ORDER BY id LIMIT 1; </span><br><span class="line">``` </span><br><span class="line">**5.加上MIN(id)的判断**</span><br><span class="line"></span><br><span class="line">```mysql</span><br><span class="line">SELECT * FROM `table`  </span><br><span class="line">WHERE id &gt;= (SELECT floor( RAND() * ((SELECT MAX(id) FROM `table`)-(SELECT MIN(id) FROM `table`)) + (SELECT MIN(id) FROM `table`)))  </span><br><span class="line">ORDER BY id LIMIT 1;  </span><br><span class="line">  </span><br><span class="line">SELECT *  </span><br><span class="line">FROM `table` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `table`)-(SELECT MIN(id) FROM `table`))+(SELECT MIN(id) FROM `table`)) AS id) AS t2  </span><br><span class="line">WHERE t1.id &gt;= t2.id  </span><br><span class="line">ORDER BY t1.id LIMIT 1;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      记录一些实用的MySQL代码片段
    
    </summary>
    
      <category term="MySQL" scheme="https://summerandwinter.github.io/category/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://summerandwinter.github.io/tag/MySQL/"/>
    
      <category term="代码片段" scheme="https://summerandwinter.github.io/tag/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    
      <category term="字段合并" scheme="https://summerandwinter.github.io/tag/%E5%AD%97%E6%AE%B5%E5%90%88%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>Ajaxload动态加载动画生成工具的实现（ajaxload的本地移植）</title>
    <link href="https://summerandwinter.github.io/ajax-loading-gif-tool.html"/>
    <id>https://summerandwinter.github.io/ajax-loading-gif-tool.html</id>
    <published>2013-11-06T16:11:30.000Z</published>
    <updated>2019-11-28T08:58:49.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前段时间看到一个[国外的网站][website]，在线生成ajax loading动画。觉得很实用，于是动起了移植到自己网站的念头（一直以来的习惯，看到好的工具总想着移植到本地好好研究）。根据以往移植的经验最终把这个工具移植到自己网站上了，生成图片的核心还是用了原来网站的接口，所以这个功能的实现完全依赖于原网站，生成和下载图片的速度取决于网速，由于是国外的网站，功能并不稳定。下面介绍下我移植的过程已经遇到的问题。<br><a id="more"></a><br>[website]:   <a href="http://www.ajaxload.info/" target="_blank" rel="noopener">http://www.ajaxload.info/</a> “ajaxinfo”</p><h1 id="把原网站的代码本地化"><a href="#把原网站的代码本地化" class="headerlink" title="把原网站的代码本地化"></a>把原网站的代码本地化</h1><p>这一步比较简单，不过有点麻烦，相关的图片，css,js，html文件保存在本地。</p><h1 id="实现生成图片的功能"><a href="#实现生成图片的功能" class="headerlink" title="实现生成图片的功能"></a>实现生成图片的功能</h1><p>这里遇到了第一个问题，网站生成的图片保存在根据颜色值生成的途径上，而这些图片有防盗链设置，不 允许外来网站引用。尝试过写程序把网站上的所有图片按原目录下载到本地，但是图片太多，放弃了这个思路。</p><p>最后采取的办法是通过伪造来源访问原网站的图片，获取图片数据，并直接输出在页面。</p><p>下面是实现的代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$file=$_REQUEST[‘file’];</span><br><span class="line">$url = ‘http:<span class="comment">//www.ajaxload.info/‘.$file;</span></span><br><span class="line">$ch = curl_init();</span><br><span class="line">curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">curl_setopt ($ch, CURLOPT_HEADER,<span class="number">0</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">curl_setopt ($ch, CURLOPT_REFERER, “http:<span class="comment">//www.ajaxload.info“);</span></span><br><span class="line">curl_setopt($ch, CURLOPT_FOLLOWLOCATION, <span class="number">1</span>);</span><br><span class="line">$chData = curl_exec($ch);</span><br><span class="line"><span class="keyword">if</span> (curl_errno($ch)) &#123;</span><br><span class="line"><span class="keyword">echo</span> ‘Curl error: ‘ . curl_error($ch);</span><br><span class="line">&#125;</span><br><span class="line">curl_close($ch);</span><br><span class="line">header(“Content-type:image/gif”);</span><br><span class="line"><span class="keyword">echo</span> $chData;</span><br></pre></td></tr></table></figure><blockquote><p>注：本人的网站基于BAE建设，与其他服务器的伪造来源有些区别</p></blockquote><p>其他服务器需把</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">curl_setopt($ch, CURLOPT_FOLLOWLOCATION, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>替换成</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">curl_setopt($ch, CURLOPT_FOLLOWLOCATION, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>把上述代码保存为ajaxload.php文件<strong>用下面的代码</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url = ‘http:<span class="comment">//laotou.sinaapp.com/ajaxloader.php?file=cache/‘+c1+’/‘+c2+’/‘+c3+’/‘+c4+’/‘+c5+’/‘+c6+’/‘+$$(‘type’).value+’-‘+trans+’.gif’;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：<code>http://laotou.sinaapp.com</code> 替换成你自己的ajaxloader.php文件的地址。</p></blockquote><p>替换原网站script.js文件中的</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url = ‘cache/‘+c1+’/‘+c2+’/‘+c3+’/‘+c4+’/‘+c5+’/‘+c6+’/‘+$(‘type’).value+’-‘+trans+’.gif’;</span><br></pre></td></tr></table></figure><h1 id="实现图片下载"><a href="#实现图片下载" class="headerlink" title="实现图片下载"></a>实现图片下载</h1><p>同样的原因，原网站的下载功能移植到本地后也不能用了，实现的方法与生成图片的方法类似</p><p>代码如下</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[url]))&#123;</span><br><span class="line">$file=$_GET[url];<span class="comment">//获取参数</span></span><br><span class="line">header(“Content-Type: application/force-download”);</span><br><span class="line">header(“Content-Disposition: attachment; filename=ajax-loading.gif”);<span class="comment">//$downname是下载后的文件名</span></span><br><span class="line">$file=$_REQUEST[‘url’];</span><br><span class="line">$url = ‘http:<span class="comment">//www.ajaxload.info/‘.$file;</span></span><br><span class="line">$ch = curl_init();</span><br><span class="line">curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">curl_setopt ($ch, CURLOPT_HEADER,<span class="number">0</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">curl_setopt ($ch, CURLOPT_REFERER, “http:<span class="comment">//www.ajaxload.info“);</span></span><br><span class="line">curl_setopt($ch, CURLOPT_FOLLOWLOCATION, <span class="number">1</span>);</span><br><span class="line">$chData = curl_exec($ch);</span><br><span class="line"><span class="keyword">if</span> (curl_errno($ch)) &#123;</span><br><span class="line"><span class="keyword">echo</span> ‘Curl error: ‘ . curl_error($ch);</span><br><span class="line">&#125;</span><br><span class="line">curl_close($ch);</span><br><span class="line"><span class="keyword">echo</span> $chData;</span><br><span class="line"><span class="keyword">exit</span>;<span class="comment">//结束程序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：<code>http://laotou.sinaapp.com</code> 替换成你自己的ajaxloader.php文件的地址。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前段时间看到一个[国外的网站][website]，在线生成ajax loading动画。觉得很实用，于是动起了移植到自己网站的念头（一直以来的习惯，看到好的工具总想着移植到本地好好研究）。根据以往移植的经验最终把这个工具移植到自己网站上了，生成图片的核心还是用了原来网站的接口，所以这个功能的实现完全依赖于原网站，生成和下载图片的速度取决于网速，由于是国外的网站，功能并不稳定。下面介绍下我移植的过程已经遇到的问题。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端设计" scheme="https://summerandwinter.github.io/category/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="Ajax" scheme="https://summerandwinter.github.io/tag/Ajax/"/>
    
      <category term="Loading" scheme="https://summerandwinter.github.io/tag/Loading/"/>
    
      <category term="动态加载" scheme="https://summerandwinter.github.io/tag/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>用Canvas实现图片滤镜效果详解之视频效果</title>
    <link href="https://summerandwinter.github.io/image-filters-by-canvas-video.html"/>
    <id>https://summerandwinter.github.io/image-filters-by-canvas-video.html</id>
    <published>2013-11-04T23:24:54.000Z</published>
    <updated>2019-11-28T08:58:49.415Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个很有意思的特效，模拟摄像机拍摄电视屏幕画面时出现点状颗粒的效果。颗粒的大小通过变换矩阵实现，可以任意调节，有兴趣研究的朋友可以尝试更多的效果，代码没有经过优化，只是一个粗糙的Demo，大家可以自行改进。<br><a id="more"></a></p><h1 id="获取图像数据"><a href="#获取图像数据" class="headerlink" title="获取图像数据"></a>获取图像数据</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">img.src = ’original.jpg’;  </span><br><span class="line">canvas.width = img.width;  </span><br><span class="line">canvas.height = img.height;  </span><br><span class="line"><span class="keyword">var</span> context = canvas.getContext(“<span class="number">2</span>d”);  </span><br><span class="line">context.drawImage(img, <span class="number">0</span>, <span class="number">0</span>);  </span><br><span class="line"><span class="keyword">var</span> canvasData = context.getImageData(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br></pre></td></tr></table></figure><h1 id="设置过滤矩阵"><a href="#设置过滤矩阵" class="headerlink" title="设置过滤矩阵"></a>设置过滤矩阵</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m_VideoType=<span class="number">0</span>;  </span><br><span class="line">       <span class="keyword">var</span> pattern=<span class="keyword">new</span> <span class="built_in">Array</span>();  </span><br><span class="line">       <span class="keyword">switch</span> (m_VideoType)  </span><br><span class="line">       &#123;  </span><br><span class="line">           case0:<span class="comment">//VIDEOTYPE.VIDEOSTAGGERED:  </span></span><br><span class="line">           &#123;  </span><br><span class="line">               pattern = [  </span><br><span class="line">                   <span class="number">0</span>, <span class="number">1</span>,  </span><br><span class="line">                   <span class="number">0</span>, <span class="number">2</span>,  </span><br><span class="line">                   <span class="number">1</span>, <span class="number">2</span>,  </span><br><span class="line">                   <span class="number">1</span>, <span class="number">0</span>,  </span><br><span class="line">                   <span class="number">2</span>, <span class="number">0</span>,  </span><br><span class="line">                   <span class="number">2</span>, <span class="number">1</span>,  </span><br><span class="line">               ];  </span><br><span class="line">               <span class="keyword">break</span>;  </span><br><span class="line">           &#125;  </span><br><span class="line">           case1:<span class="comment">//VIDEOTYPE.VIDEOTRIPED:  </span></span><br><span class="line">           &#123;  </span><br><span class="line">               pattern = [    </span><br><span class="line">                   <span class="number">0</span>,  </span><br><span class="line">                   <span class="number">1</span>,  </span><br><span class="line">                   <span class="number">2</span>,  </span><br><span class="line">               ];  </span><br><span class="line">               <span class="keyword">break</span>;  </span><br><span class="line">           &#125;  </span><br><span class="line">           case2:<span class="comment">//VIDEOTYPE.VIDEO3X3:  </span></span><br><span class="line">           &#123;  </span><br><span class="line">               pattern =  </span><br><span class="line">               [  </span><br><span class="line">                   <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>,  </span><br><span class="line">                   <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>,  </span><br><span class="line">                   <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>,  </span><br><span class="line">               ];  </span><br><span class="line">               <span class="keyword">break</span>;  </span><br><span class="line">           &#125;  </span><br><span class="line">           <span class="keyword">default</span>:  </span><br><span class="line">           &#123;  </span><br><span class="line">               pattern =  </span><br><span class="line">               [  </span><br><span class="line">                   <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>,  </span><br><span class="line">                   <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>,  </span><br><span class="line">                   <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>,  </span><br><span class="line">                   <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>,  </span><br><span class="line">                   <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>,  </span><br><span class="line">                   <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>,  </span><br><span class="line">                   <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>,  </span><br><span class="line">                   <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,  </span><br><span class="line">                   <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>,  </span><br><span class="line">                   <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,  </span><br><span class="line">                   <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>,  </span><br><span class="line">                   <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>,  </span><br><span class="line">                   <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,  </span><br><span class="line">                   <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>,  </span><br><span class="line">                   <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>,  </span><br><span class="line">               ];  </span><br><span class="line">               <span class="keyword">break</span>;  </span><br><span class="line">           &#125;  </span><br><span class="line">       &#125;  </span><br><span class="line">       <span class="keyword">var</span> pattern_width = [ <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span> ];  </span><br><span class="line">       <span class="keyword">var</span> pattern_height = [<span class="number">6</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">15</span> ];</span><br></pre></td></tr></table></figure><h1 id="获取过滤数据"><a href="#获取过滤数据" class="headerlink" title="获取过滤数据"></a>获取过滤数据</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> x = <span class="number">0</span>; x &lt; canvasData.width; x++) &#123;    </span><br><span class="line">         <span class="keyword">for</span> ( <span class="keyword">var</span> y = <span class="number">0</span>; y &lt; canvasData.height; y++) &#123;    </span><br><span class="line">        </span><br><span class="line">           <span class="comment">// Index of the pixel in the array    </span></span><br><span class="line">           <span class="keyword">var</span> idx = (x + y  canvasData.width)  <span class="number">4</span>;    </span><br><span class="line">           <span class="keyword">var</span> r = canvasData.data[idx + <span class="number">0</span>];    </span><br><span class="line">           <span class="keyword">var</span> g = canvasData.data[idx + <span class="number">1</span>];    </span><br><span class="line">           <span class="keyword">var</span> b = canvasData.data[idx + <span class="number">2</span>];    </span><br><span class="line">              <span class="keyword">var</span> nWidth = patternwidth[mVideoType];  </span><br><span class="line">              <span class="keyword">var</span> nHeight = patternheight[mVideoType];  </span><br><span class="line">              <span class="keyword">var</span> index = nWidth * (y % nHeight) + (x % nWidth);  </span><br><span class="line">  </span><br><span class="line">              index = pattern[index];  </span><br><span class="line">              <span class="keyword">if</span> (index == <span class="number">0</span>)  </span><br><span class="line">               <span class="keyword">var</span>   r = fclamp0255(<span class="number">2</span> * r);  </span><br><span class="line">              <span class="keyword">if</span> (index == <span class="number">1</span>)  </span><br><span class="line">               <span class="keyword">var</span>   g = fclamp0255(<span class="number">2</span> * g);  </span><br><span class="line">              <span class="keyword">if</span> (index == <span class="number">2</span>)  </span><br><span class="line">               <span class="keyword">var</span>   b = fclamp0255(<span class="number">2</span> * b);  </span><br><span class="line">                    </span><br><span class="line">            <span class="comment">// assign gray scale value    </span></span><br><span class="line">            canvasData.data[idx + <span class="number">0</span>] = r; <span class="comment">// Red channel    </span></span><br><span class="line">            canvasData.data[idx + <span class="number">1</span>] = g; <span class="comment">// Green channel    </span></span><br><span class="line">            canvasData.data[idx + <span class="number">2</span>] = b; <span class="comment">// Blue channel    </span></span><br><span class="line">            canvasData.data[idx + <span class="number">3</span>] = <span class="number">255</span>; <span class="comment">// Alpha channel    </span></span><br><span class="line">            <span class="comment">// 加上黑色的边框    </span></span><br><span class="line">            <span class="keyword">if</span>(x &lt; <span class="number">8</span> || y &lt; <span class="number">8</span> || x &gt; (canvasData.width - <span class="number">8</span>) || y &gt; (canvasData.height - <span class="number">8</span>))     </span><br><span class="line">            &#123;    </span><br><span class="line">              canvasData.data[idx + <span class="number">0</span>] = <span class="number">0</span>;    </span><br><span class="line">              canvasData.data[idx + <span class="number">1</span>] = <span class="number">0</span>;    </span><br><span class="line">              canvasData.data[idx + <span class="number">2</span>] = <span class="number">0</span>;    </span><br><span class="line">            &#125;    </span><br><span class="line">         &#125;    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="写入过滤后的数据"><a href="#写入过滤后的数据" class="headerlink" title="写入过滤后的数据"></a>写入过滤后的数据</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">context.putImageData(canvasData, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h1 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h1><p><strong>原图</strong></p><p><img src="//cdn.jsdelivr.net/gh/summerandwinter/summerandwinter.github.io/assets/images/filter/original.jpg" alt="原图"></p><p><strong>效果图</strong></p><p><img src="//cdn.jsdelivr.net/gh/summerandwinter/summerandwinter.github.io/assets/images/filter/video.jpg" alt="效果图"></p><p>查看<strong><a href="/lab/filters/video.html">示例</a></strong></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/daizhenjun/ImageFilterForAndroid" target="_blank" rel="noopener">代震军ImageFilter开源项目</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个很有意思的特效，模拟摄像机拍摄电视屏幕画面时出现点状颗粒的效果。颗粒的大小通过变换矩阵实现，可以任意调节，有兴趣研究的朋友可以尝试更多的效果，代码没有经过优化，只是一个粗糙的Demo，大家可以自行改进。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端设计" scheme="https://summerandwinter.github.io/category/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="HTML5" scheme="https://summerandwinter.github.io/tag/HTML5/"/>
    
      <category term="JavaScript" scheme="https://summerandwinter.github.io/tag/JavaScript/"/>
    
      <category term="Canvas" scheme="https://summerandwinter.github.io/tag/Canvas/"/>
    
      <category term="图像滤镜" scheme="https://summerandwinter.github.io/tag/%E5%9B%BE%E5%83%8F%E6%BB%A4%E9%95%9C/"/>
    
      <category term="滤镜" scheme="https://summerandwinter.github.io/tag/%E6%BB%A4%E9%95%9C/"/>
    
      <category term="视频滤镜" scheme="https://summerandwinter.github.io/tag/%E8%A7%86%E9%A2%91%E6%BB%A4%E9%95%9C/"/>
    
  </entry>
  
</feed>
